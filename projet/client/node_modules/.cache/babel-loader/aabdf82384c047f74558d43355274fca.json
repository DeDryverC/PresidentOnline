{"ast":null,"code":"var _jsxFileName = \"/home/debian/hosting/projet/client/src/pages/Game/Game.js\";\nimport React, { Component } from \"react\";\nimport { Button, Row, Col, Container, Alert } from 'react-bootstrap';\nimport Carte from '../../components/Carte';\nimport io from \"socket.io-client\";\n/* TODO :   connexion a la game\n            token\n\n            Reconnection si deco\n            fin de round\n            fin de game\n            envoi stats\n            page de fin\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet gameSocket;\n\nclass Game extends Component {\n  constructor() {\n    super();\n    /*********** Global Variables ***********/\n\n    this.whatCardIs = num => {\n      // RETURN -1 IF NOT\n      if (this.state.cardList.ace.indexOf(String(num)) !== -1) {\n        switch (this.state.cardList.ace.indexOf(String(num))) {\n          case 0:\n            return '15:s';\n\n          case 1:\n            return '15:h';\n\n          case 2:\n            return '15:c';\n\n          case 3:\n            return '15:d';\n\n          default:\n            return 0;\n        }\n      } else if (this.state.cardList.two.indexOf(String(num)) !== -1) {\n        switch (this.state.cardList.two.indexOf(String(num))) {\n          case 0:\n            return '20:s';\n\n          case 1:\n            return '20:h';\n\n          case 2:\n            return '20:c';\n\n          case 3:\n            return '20:d';\n\n          default:\n            return 0;\n        }\n      } else if (this.state.cardList.three.indexOf(String(num)) !== -1) {\n        switch (this.state.cardList.three.indexOf(String(num))) {\n          case 0:\n            return '3:s';\n\n          case 1:\n            return '3:h';\n\n          case 2:\n            return '3:c';\n\n          case 3:\n            return '3:d';\n\n          default:\n            return 0;\n        }\n      } else if (this.state.cardList.four.indexOf(String(num)) !== -1) {\n        switch (this.state.cardList.four.indexOf(String(num))) {\n          case 0:\n            return '4:s';\n\n          case 1:\n            return '4:h';\n\n          case 2:\n            return '4:c';\n\n          case 3:\n            return '4:d';\n\n          default:\n            return 0;\n        }\n      } else if (this.state.cardList.five.indexOf(String(num)) !== -1) {\n        switch (this.state.cardList.five.indexOf(String(num))) {\n          case 0:\n            return '5:s';\n\n          case 1:\n            return '5:h';\n\n          case 2:\n            return '5:c';\n\n          case 3:\n            return '5:d';\n\n          default:\n            return 0;\n        }\n      } else if (this.state.cardList.six.indexOf(String(num)) !== -1) {\n        switch (this.state.cardList.six.indexOf(String(num))) {\n          case 0:\n            return '6:s';\n\n          case 1:\n            return '6:h';\n\n          case 2:\n            return '6:c';\n\n          case 3:\n            return '6:d';\n\n          default:\n            return 0;\n        }\n      } else if (this.state.cardList.seven.indexOf(String(num)) !== -1) {\n        switch (this.state.cardList.seven.indexOf(String(num))) {\n          case 0:\n            return '7:s';\n\n          case 1:\n            return '7:h';\n\n          case 2:\n            return '7:c';\n\n          case 3:\n            return '7:d';\n\n          default:\n            return 0;\n        }\n      } else if (this.state.cardList.eight.indexOf(String(num)) !== -1) {\n        switch (this.state.cardList.eight.indexOf(String(num))) {\n          case 0:\n            return '8:s';\n\n          case 1:\n            return '8:h';\n\n          case 2:\n            return '8:c';\n\n          case 3:\n            return '8:d';\n\n          default:\n            return 0;\n        }\n      } else if (this.state.cardList.nine.indexOf(String(num)) !== -1) {\n        switch (this.state.cardList.nine.indexOf(String(num))) {\n          case 0:\n            return '9:s';\n\n          case 1:\n            return '9:h';\n\n          case 2:\n            return '9:c';\n\n          case 3:\n            return '9:d';\n\n          default:\n            return 0;\n        }\n      } else if (this.state.cardList.ten.indexOf(String(num)) !== -1) {\n        switch (this.state.cardList.ten.indexOf(String(num))) {\n          case 0:\n            return '10:s';\n\n          case 1:\n            return '10:h';\n\n          case 2:\n            return '10:c';\n\n          case 3:\n            return '10:d';\n\n          default:\n            return 0;\n        }\n      } else if (this.state.cardList.jack.indexOf(String(num)) !== -1) {\n        switch (this.state.cardList.jack.indexOf(String(num))) {\n          case 0:\n            return '11:s';\n\n          case 1:\n            return '11:h';\n\n          case 2:\n            return '11:c';\n\n          case 3:\n            return '11:d';\n\n          default:\n            return 0;\n        }\n      } else if (this.state.cardList.queen.indexOf(String(num)) !== -1) {\n        switch (this.state.cardList.queen.indexOf(String(num))) {\n          case 0:\n            return '12:s';\n\n          case 1:\n            return '12:h';\n\n          case 2:\n            return '12:c';\n\n          case 3:\n            return '12:d';\n\n          default:\n            return 0;\n        }\n      } else if (this.state.cardList.king.indexOf(String(num)) !== -1) {\n        switch (this.state.cardList.king.indexOf(String(num))) {\n          case 0:\n            return '13:s';\n\n          case 1:\n            return '13:h';\n\n          case 2:\n            return '13:c';\n\n          case 3:\n            return '13:d';\n\n          default:\n            return 0;\n        }\n      }\n    };\n\n    this.isRoundOver = (cards, cardsNum) => {\n      if (cards.length === 4) {\n        return true;\n      } else if (cardsNum === 20) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.showCard = card => {\n      if (this.state.selectedCard.indexOf(card) === -1) {\n        this.setState(state => {\n          const selectedCard = state.selectedCard.concat(card);\n          return {\n            selectedCard\n          };\n        });\n      } else {\n        var selectedCard = [...this.state.selectedCard];\n        const index = this.state.selectedCard.indexOf(card);\n        selectedCard.splice(index, 1);\n        this.setState({\n          selectedCard: selectedCard\n        });\n      }\n\n      return 0;\n    };\n\n    this.generatePlayersData = () => {\n      const players = this.state.players;\n      const p1 = this.state.player1;\n      const p2 = this.state.player2;\n      const p3 = this.state.player3;\n      const p4 = this.state.player4;\n      const p5 = this.state.player5;\n      players.map((data, key) => {\n        if (key === 0) {\n          if (p1.set === false) {\n            const dataf = data.split('|');\n            p1.pseudo = dataf[0];\n\n            for (let i = 0; i < dataf[1]; i++) {\n              p1.cards.push(0);\n            }\n\n            p1.set = true;\n          }\n        }\n\n        if (key === 1) {\n          if (p2.set === false) {\n            const dataf = data.split('|');\n            p2.pseudo = dataf[0];\n\n            for (let i = 0; i < dataf[1]; i++) {\n              p2.cards.push(0);\n            }\n\n            p2.set = true;\n          }\n        }\n\n        if (key === 2) {\n          if (p3.set === false) {\n            const dataf = data.split('|');\n            p3.pseudo = dataf[0];\n\n            for (let i = 0; i < dataf[1]; i++) {\n              p3.cards.push(0);\n            }\n\n            p3.set = true;\n          }\n        }\n\n        if (key === 3) {\n          if (p4.set === false) {\n            const dataf = data.split('|');\n            p4.pseudo = dataf[0];\n\n            for (let i = 0; i < dataf[1]; i++) {\n              p4.cards.push(0);\n            }\n\n            p4.set = true;\n          }\n        }\n\n        if (key === 4) {\n          if (p5.set === false) {\n            const dataf = data.split('|');\n            p5.pseudo = dataf[0];\n\n            for (let i = 0; i < dataf[1]; i++) {\n              p5.cards.push(0);\n            }\n\n            p5.set = true;\n          }\n        }\n\n        return 0;\n      });\n      this.setState({\n        player1: p1,\n        player2: p2,\n        player3: p3,\n        player4: p4,\n        player5: p5\n      });\n    };\n\n    this.resetError = () => {\n      const error = {\n        type: null,\n        title: null,\n        message: null,\n        variant: null\n      };\n      this.setState({\n        errorMessage: error\n      });\n    };\n\n    this.pileTypeCard = () => {\n      const pile = this.state.pile;\n\n      if (pile.length === 0) {\n        return -1;\n      } else {\n        const numPile = this.whatCardIs(pile[0]).split(':');\n\n        if (numPile[0] === 0) {\n          return 10;\n        } else {\n          return Number(numPile[0]);\n        }\n      }\n    };\n\n    this.sameSelectedCard = () => {\n      var selCard = this.state.selectedCard;\n      var len = selCard.length;\n      var prev1 = this.whatCardIs(selCard[0]).split(':');\n      var prev = prev1[0];\n\n      if (len === 1) {\n        return Number(prev);\n      } else {\n        for (let i = 0; i < len; i++) {\n          const actual = this.whatCardIs(selCard[i]).split(':');\n\n          if (prev !== actual[0]) {\n            return -1;\n          }\n\n          prev = actual[0];\n        }\n\n        return Number(prev);\n      }\n    };\n\n    this.canHePlay = () => {\n      if (this.state.playerToken === 1) {\n        const actualPile = this.state.pile; //const playerCard = this.state.playerCard\n\n        const selCard = this.state.selectedCard;\n        const ssc = this.sameSelectedCard();\n        const ptc = this.pileTypeCard();\n\n        if (actualPile.length > selCard.length && ssc !== 20) {\n          const error = {\n            type: 'rules',\n            title: 'You cannot play this',\n            message: 'You cannot play fewer cards than there are in the pile',\n            variant: 'danger'\n          };\n          this.setState({\n            errorMessage: error\n          });\n        } else if (ssc === -1 && ssc !== 20) {\n          const error = {\n            type: 'rules',\n            title: 'You cannot play this',\n            message: 'You cannot play two cards of different value',\n            variant: 'danger'\n          };\n          this.setState({\n            errorMessage: error\n          });\n        } else if (ssc < ptc && ssc !== 20) {\n          const error = {\n            type: 'rules',\n            title: 'You cannot play this',\n            message: 'You cannot play one or more cards smaller than those in the pile',\n            variant: 'danger'\n          };\n          this.setState({\n            errorMessage: error\n          });\n        } else if (actualPile.length - 1 > selCard.length && ssc === 20) {\n          const error = {\n            type: 'rules',\n            title: 'You cannot play this',\n            message: 'You need an extra 2 if you want to cut a series of 3 cards',\n            variant: 'danger'\n          };\n          this.setState({\n            errorMessage: error\n          });\n        } else {\n          const message = {\n            type: 'finish',\n            title: 'You just played',\n            message: 'Wait for your turn.',\n            variant: 'success'\n          };\n          const user = this.state.currentUser;\n          let counter = this.state.countTurn;\n          counter++;\n          const copyTable = this.state.orderTurn.slice();\n          const nextUser = copyTable[counter];\n          this.setState({\n            errorMessage: message,\n            playerToken: 0,\n            countTurn: counter\n          });\n          gameSocket.emit('finishTurn', nextUser);\n          this.delSelectedCard();\n          this.changePile(selCard, ssc);\n        }\n      } else {\n        const error = {\n          type: 'Not your turn',\n          title: 'You cant play now',\n          message: 'Its not your turn, wait for it.',\n          variant: ''\n        };\n        this.setState({\n          errorMessage: error\n        });\n      }\n    };\n\n    this.changePile = (newCards, newCardsNum) => {\n      if (this.isRoundOver(newCards, newCardsNum) === false) {\n        const game_id = this.state.game_id;\n        gameSocket.emit('chgpile', {\n          newcds: newCards,\n          gid: game_id\n        });\n      } else {\n        //switch socket.\n        const game_id = this.state.game_id;\n        gameSocket.emit('chgpile', {\n          newcds: newCards,\n          gid: game_id\n        });\n      }\n    };\n\n    this.playButton = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: this.state.defStyle,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          children: \"Play selected cards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.isThereErrorMessage = () => {\n      if (this.state.errorMessage.type === 'rules') {\n        return /*#__PURE__*/_jsxDEV(Row, {\n          style: this.state.defStyle,\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            variant: this.state.errorMessage.variant,\n            children: [/*#__PURE__*/_jsxDEV(Alert.Heading, {\n              children: this.state.errorMessage.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 25\n            }, this), this.state.errorMessage.message, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 25\n            }, this), \"Check the rules for more informations\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 17\n        }, this);\n      } else if (this.state.errorMessage.type === 'finish') {\n        return /*#__PURE__*/_jsxDEV(Row, {\n          style: this.state.defStyle,\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            variant: this.state.errorMessage.variant,\n            onClose: () => this.resetError(),\n            dismissible: true,\n            children: [/*#__PURE__*/_jsxDEV(Alert.Heading, {\n              children: this.state.errorMessage.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 25\n            }, this), this.state.errorMessage.message]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 17\n        }, this);\n      } else if (this.state.errorMessage.type === 'token') {\n        return /*#__PURE__*/_jsxDEV(Row, {\n          style: this.state.defStyle,\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            variant: this.state.errorMessage.variant,\n            onClose: () => this.resetError(),\n            dismissible: true,\n            children: [/*#__PURE__*/_jsxDEV(Alert.Heading, {\n              children: this.state.errorMessage.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 25\n            }, this), this.state.errorMessage.message]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 17\n        }, this);\n      }\n    };\n\n    this.isThere4Players = () => {\n      if (this.state.player4.pseudo !== null) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            style: this.state.defStyle,\n            children: this.state.player4.cards.map((value, key) => {\n              return /*#__PURE__*/_jsxDEV(Carte, {\n                num: value,\n                index: key,\n                identity: \"othercards\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 450,\n                columnNumber: 40\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            style: this.state.defStyle,\n            children: this.state.player4.pseudo !== null ? /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n              },\n              children: this.state.player4.pseudo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 63\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 182\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 17\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 17\n        }, this);\n      }\n    };\n\n    this.isThere5Players = () => {\n      if (this.state.player5.pseudo !== null) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            style: this.state.defStyle,\n            children: this.state.player5.cards.map((value, key) => {\n              return /*#__PURE__*/_jsxDEV(Carte, {\n                num: value,\n                index: key,\n                identity: \"othercards\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 40\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            style: this.state.defStyle,\n            children: this.state.player5.pseudo !== null ? /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n              },\n              children: this.state.player5.pseudo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 63\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 182\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 17\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 17\n        }, this);\n      }\n    };\n\n    this.delSelectedCard = () => {\n      const selCard = this.state.selectedCard;\n      var userCard = this.state.playerCard;\n      gameSocket.emit('delcard', {\n        gid: this.state.game_id,\n        us: this.state.currentUser,\n        sc: this.state.selectedCard,\n        usc: this.state.playerCard\n      });\n      gameSocket.on('delcardReturn', sdata => {\n        const userCard = sdata;\n        this.setState({\n          playerCard: userCard,\n          selectedCard: []\n        });\n      });\n    };\n\n    this.closeAlert = () => {\n      this.setState({\n        showAlert: false\n      });\n    };\n\n    this.state = {\n      /* Usefull variables*/\n      playerToken: 0,\n      selectedCard: [],\n      switcher: false,\n      errorMessage: {\n        type: null,\n        title: null,\n        message: null,\n        variant: null\n      },\n      game_id: localStorage.getItem('gameId'),\n      currentUser: localStorage.getItem('pseudo'),\n      orderTurn: localStorage.getItem('turn').split(','),\n      countTurn: 0,\n      countRound: 0,\n\n      /* Test variable */\n      testChgPile: [5, 18],\n      testChgPile2: [13],\n\n      /* socket io */\n      connectionConfig: {\n        \"force new connection\": true,\n        \"reconnectionAttemps\": \"Infinity\",\n        \"timeout\": 75,\n        \"transports\": [\"websocket\", \"polling\"],\n        \"path\": '/app1socket'\n      },\n      endpoint: 'htpp://135.125.101.210:5002/app1socket',\n\n      /* RAW DATA */\n      playersData: null,\n      data: null,\n\n      /* PLAYERS */\n      players: [],\n      player1: {\n        pseudo: null,\n        cards: [],\n        set: false,\n        connected: false\n      },\n      player2: {\n        pseudo: null,\n        cards: [],\n        set: false,\n        connected: false\n      },\n      player3: {\n        pseudo: null,\n        cards: [],\n        set: false,\n        connected: false\n      },\n      player4: {\n        pseudo: null,\n        cards: [],\n        set: false,\n        connected: false\n      },\n      player5: {\n        pseudo: null,\n        cards: [],\n        set: false,\n        connected: false\n      },\n\n      /* STYLE */\n      defStyle: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      cardStyle: {\n        border: '2px solid red',\n        borderRadius: '10px'\n      },\n\n      /* VISIBLE CARDS */\n      pile: [],\n      playerCard: [],\n\n      /* List of all card, refers to their .png */\n      cardList: {\n        ace: ['1', '14', '27', '40'],\n        two: ['2', '15', '28', '41'],\n        three: ['3', '16', '29', '42'],\n        four: ['4', '17', '30', '43'],\n        five: ['5', '18', '31', '44'],\n        six: ['6', '19', '32', '45'],\n        seven: ['7', '20', '33', '46'],\n        eight: ['8', '21', '34', '47'],\n        nine: ['9', '22', '35', '48'],\n        ten: ['10', '23', '36', '49'],\n        jack: ['11', '24', '37', '50'],\n        queen: ['12', '25', '38', '51'],\n        king: ['13', '26', '39', '52']\n      }\n    };\n    gameSocket = io.connect(this.state.endpoint, this.state.connectionConfig);\n  }\n  /********************** Game Function **********************/\n\n  /***********  ***********/\n\n\n  canHeStart() {\n    if (this.state.countRound < 1) {\n      const currUser = this.state.currentUser;\n\n      if (this.state.playerCard.indexOf('25') !== -1) {\n        this.setState({\n          playerToken: 1\n        });\n        gameSocket.emit('startPlaying', {\n          user: currUser\n        });\n      } else {}\n    }\n  }\n\n  componentDidMount() {\n    const currUser = this.state.currentUser;\n    const gameId = this.state.gameId;\n    gameSocket.on('connection', function (data) {}); // Requete backend pour savoir les cartes de l'utilisateur local\n\n    gameSocket.emit('join_game', {\n      gid: this.state.game_id,\n      user: this.state.currentUser\n    });\n    gameSocket.on('userCard', sdata => {\n      const json = sdata;\n      json.forEach(({\n        user,\n        card\n      }) => {\n        this.setState(state => {\n          const playerCard = state.playerCard.concat(card);\n          return {\n            playerCard\n          };\n        }, this.canHeStart);\n      });\n    }); // Requete backend pour avoir le nombre de carte des joueurs\n\n    gameSocket.on('othersCount', sdata => {\n      const json = sdata;\n      this.setState({\n        playersData: json\n      });\n      json.forEach(({\n        user,\n        Ncards\n      }) => {\n        const passerelle = user + '|' + Ncards;\n        this.setState(state => {\n          const players = state.players.concat(passerelle);\n          return {\n            players\n          };\n        }, this.generatePlayersData);\n      });\n    });\n    gameSocket.on('cardsPot', sdata => {\n      const json = sdata;\n      json.forEach(({\n        user,\n        card\n      }) => {\n        this.setState(state => {\n          const pile = state.pile.concat(card);\n          return {\n            pile\n          };\n        });\n      });\n    });\n    gameSocket.on('newpile', sdata => {\n      const newpile = sdata;\n      this.setState({\n        pile: newpile\n      });\n    });\n    gameSocket.on('playerdeconnexion', sdata => {\n      const player = sdata.user;\n    });\n    gameSocket.on('userPlayed', sdata => {\n      let counter = this.state.countTurn;\n      counter++;\n\n      if (sdata === currUser) {\n        const msg = {\n          type: 'turn',\n          title: 'La partie a commencé',\n          message: `C'est a toi de jouer chef`,\n          variant: 'success'\n        };\n        this.setState({\n          playerToken: 1,\n          errorMessage: msg\n        });\n      }\n\n      this.setState({\n        countTurn: counter\n      });\n    });\n    gameSocket.on('gameStarted', sdata => {\n      const msg = {\n        type: 'start',\n        title: 'La partie a commencé',\n        message: `${sdata} dispose de la dame de coeur, il commence la partie`,\n        variant: 'info'\n      };\n      this.setState({\n        errorMessage: msg\n      });\n    });\n    const playerCard = this.state.playerCard;\n  }\n\n  componentDidUpdate() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid black',\n        backgroundColor: '#5DAB51'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        fluid: true,\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Container, {\n              fluid: true,\n              children: [/*#__PURE__*/_jsxDEV(Row, {\n                style: this.state.defStyle,\n                children: this.state.player1.cards.map((value, key) => {\n                  return /*#__PURE__*/_jsxDEV(Carte, {\n                    num: value,\n                    index: key,\n                    identity: \"othercards\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 598,\n                    columnNumber: 52\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 595,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 601,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                style: this.state.defStyle,\n                children: this.state.player1.pseudo !== null ? /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center'\n                  },\n                  children: this.state.player1.pseudo\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 603,\n                  columnNumber: 75\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 603,\n                  columnNumber: 194\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 602,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              style: this.state.defStyle,\n              children: this.state.player2.cards.map((value, key) => {\n                return /*#__PURE__*/_jsxDEV(Carte, {\n                  num: value,\n                  index: key,\n                  identity: \"othercards\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 618,\n                  columnNumber: 48\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 615,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 621,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              style: this.state.defStyle,\n              children: this.state.player2.pseudo !== null ? /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center'\n                },\n                children: this.state.player2.pseudo\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 623,\n                columnNumber: 71\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 623,\n                columnNumber: 190\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            style: {\n              border: '2px solid red',\n              borderRadius: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              style: this.state.defStyle,\n              children: this.state.switcher === true ? /*#__PURE__*/_jsxDEV(\"span\", {\n                id: String(this.state.switcher),\n                children: \"Pile\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 629,\n                columnNumber: 65\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                id: String(this.state.switcher),\n                children: \"Pile\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 629,\n                columnNumber: 118\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 628,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              style: this.state.defStyle,\n              children: this.state.pile === [] ? /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"VIDE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 633,\n                columnNumber: 62\n              }, this) : this.state.pile.map((value, key) => {\n                return /*#__PURE__*/_jsxDEV(Carte, {\n                  num: value,\n                  index: key,\n                  identity: \"cards\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 634,\n                  columnNumber: 48\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 631,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Row, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              style: this.state.defStyle,\n              children: this.state.player3.cards.map((value, key) => {\n                return /*#__PURE__*/_jsxDEV(Carte, {\n                  num: value,\n                  index: key,\n                  identity: \"othercards\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 647,\n                  columnNumber: 48\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 644,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 650,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              style: this.state.defStyle,\n              children: this.state.player3.pseudo !== null ? /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center'\n                },\n                children: this.state.player3.pseudo\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 652,\n                columnNumber: 71\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 652,\n                columnNumber: 190\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 651,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            children: this.isThere4Players()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: this.isThereErrorMessage()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 662,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: this.isThere5Players()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        fluid: true,\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [this.state.playerToken === 1 ? /*#__PURE__*/_jsxDEV(Col, {\n            style: this.state.defStyle,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"secondary\",\n              block: true,\n              disable: true,\n              children: \"pass\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 89\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 56\n          }, this) : /*#__PURE__*/_jsxDEV(Col, {\n            style: this.state.defStyle,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              block: true,\n              children: \"pass\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 186\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 153\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            style: this.state.defStyle,\n            children: this.state.playerCard.map((value, index) => {\n              if (this.state.selectedCard.indexOf(value) !== -1) {\n                return /*#__PURE__*/_jsxDEV(Carte, {\n                  num: value,\n                  index: index,\n                  identity: \"usercards\",\n                  action: this.showCard,\n                  style: this.state.cardStyle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 679,\n                  columnNumber: 48\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(Carte, {\n                  num: value,\n                  index: index,\n                  identity: \"usercards\",\n                  action: this.showCard\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 681,\n                  columnNumber: 48\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 675,\n            columnNumber: 25\n          }, this), this.state.selectedCard.length > 0 ? this.state.playerToken === 1 ? /*#__PURE__*/_jsxDEV(Col, {\n            style: this.state.defStyle,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => this.canHePlay(),\n              block: true,\n              children: \"Play selected cards\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 686,\n              columnNumber: 127\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 94\n          }, this) : /*#__PURE__*/_jsxDEV(Col, {\n            style: this.state.defStyle,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"secondary\",\n              block: true,\n              disabled: true,\n              children: \"Play selected cards\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 686,\n              columnNumber: 243\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 210\n          }, this) : /*#__PURE__*/_jsxDEV(Col, {\n            style: this.state.defStyle,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"secondary\",\n              block: true,\n              disabled: true,\n              children: \"Play selected cards\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 686,\n              columnNumber: 356\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 323\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Game;\n/*{\n            ace :   '1:14:27:40' ,\n            two:    '2:15:28:41',\n            three:  '3:16:29:42',\n            four:   '4:17:30:43',\n            five:   '5:18:31:44',\n            six:    '6:19:32:45',\n            seven:  '7:20:33:46',\n            eight:  '8:21:34:47',\n            nine:   '9:22:35:48',\n            ten:    '10:23:36:49',\n            jack:   '11:24:37:50',\n            queen:  '12:25:38:51',\n            king:   '13:26:39:52',\n\n            } */","map":{"version":3,"sources":["/home/debian/hosting/projet/client/src/pages/Game/Game.js"],"names":["React","Component","Button","Row","Col","Container","Alert","Carte","io","gameSocket","Game","constructor","whatCardIs","num","state","cardList","ace","indexOf","String","two","three","four","five","six","seven","eight","nine","ten","jack","queen","king","isRoundOver","cards","cardsNum","length","showCard","card","selectedCard","setState","concat","index","splice","generatePlayersData","players","p1","player1","p2","player2","p3","player3","p4","player4","p5","player5","map","data","key","set","dataf","split","pseudo","i","push","resetError","error","type","title","message","variant","errorMessage","pileTypeCard","pile","numPile","Number","sameSelectedCard","selCard","len","prev1","prev","actual","canHePlay","playerToken","actualPile","ssc","ptc","user","currentUser","counter","countTurn","copyTable","orderTurn","slice","nextUser","emit","delSelectedCard","changePile","newCards","newCardsNum","game_id","newcds","gid","playButton","defStyle","isThereErrorMessage","isThere4Players","value","display","justifyContent","alignItems","isThere5Players","userCard","playerCard","us","sc","usc","on","sdata","closeAlert","showAlert","switcher","localStorage","getItem","countRound","testChgPile","testChgPile2","connectionConfig","endpoint","playersData","connected","cardStyle","border","borderRadius","connect","canHeStart","currUser","componentDidMount","gameId","json","forEach","Ncards","passerelle","newpile","player","msg","componentDidUpdate","render","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Row, Col, Container, Alert } from 'react-bootstrap';\nimport Carte from '../../components/Carte'\nimport io from \"socket.io-client\";\n\n/* TODO :   connexion a la game\n            token\n\n            Reconnection si deco\n            fin de round\n            fin de game\n            envoi stats\n            page de fin\n\n*/\nlet gameSocket\n\nclass Game extends Component {\n\n    constructor() {\n        super();\n\n        /*********** Global Variables ***********/\n\n        this.state = {\n            /* Usefull variables*/\n            playerToken: 0,\n            selectedCard: [],\n            switcher: false,\n            errorMessage: { type: null, title: null, message: null, variant: null },\n            game_id : localStorage.getItem('gameId'),\n            currentUser: localStorage.getItem('pseudo'),\n            orderTurn: localStorage.getItem('turn').split(','),\n            countTurn: 0,\n            countRound: 0,\n\n            /* Test variable */\n            testChgPile: [5, 18],\n            testChgPile2: [13],\n\n            /* socket io */\n            connectionConfig: {\n                \"force new connection\": true,\n                \"reconnectionAttemps\": \"Infinity\",\n                \"timeout\": 75,\n                \"transports\": [\"websocket\",\"polling\"],\n                \"path\": '/app1socket'\n            },\n            endpoint: 'htpp://135.125.101.210:5002/app1socket',\n\n            /* RAW DATA */\n            playersData: null,\n            data: null,\n\n            /* PLAYERS */\n            players: [],\n            player1: { pseudo: null, cards: [], set: false, connected : false },\n            player2: { pseudo: null, cards: [], set: false, connected : false },\n            player3: { pseudo: null, cards: [], set: false, connected : false },\n            player4: { pseudo: null, cards: [], set: false, connected : false },\n            player5: { pseudo: null, cards: [], set: false, connected : false },\n\n            /* STYLE */\n            defStyle: { display: 'flex', justifyContent: 'center', alignItems: 'center' },\n            cardStyle: { border: '2px solid red', borderRadius: '10px', },\n\n            /* VISIBLE CARDS */\n            pile: [],\n            playerCard: [],\n\n            /* List of all card, refers to their .png */\n            cardList: {\n                ace: ['1', '14', '27', '40'],\n                two: ['2', '15', '28', '41'],\n                three: ['3', '16', '29', '42'],\n                four: ['4', '17', '30', '43'],\n                five: ['5', '18', '31', '44'],\n                six: ['6', '19', '32', '45'],\n                seven: ['7', '20', '33', '46'],\n                eight: ['8', '21', '34', '47'],\n                nine: ['9', '22', '35', '48'],\n                ten: ['10', '23', '36', '49'],\n                jack: ['11', '24', '37', '50'],\n                queen: ['12', '25', '38', '51'],\n                king: ['13', '26', '39', '52'],\n\n            }\n\n        }\n        gameSocket = io.connect(this.state.endpoint, this.state.connectionConfig)\n\n    }\n\n    /********************** Game Function **********************/\n\n    /***********  ***********/\n\n    whatCardIs = (num) => {\n        // RETURN -1 IF NOT\n        if (this.state.cardList.ace.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.ace.indexOf(String(num))) {\n                case 0: return '15:s';\n                case 1: return '15:h';\n                case 2: return '15:c';\n                case 3: return '15:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.two.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.two.indexOf(String(num))) {\n                case 0: return '20:s';\n                case 1: return '20:h';\n                case 2: return '20:c';\n                case 3: return '20:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.three.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.three.indexOf(String(num))) {\n                case 0: return '3:s';\n                case 1: return '3:h';\n                case 2: return '3:c';\n                case 3: return '3:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.four.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.four.indexOf(String(num))) {\n                case 0: return '4:s';\n                case 1: return '4:h';\n                case 2: return '4:c';\n                case 3: return '4:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.five.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.five.indexOf(String(num))) {\n                case 0: return '5:s';\n                case 1: return '5:h';\n                case 2: return '5:c';\n                case 3: return '5:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.six.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.six.indexOf(String(num))) {\n                case 0: return '6:s';\n                case 1: return '6:h';\n                case 2: return '6:c';\n                case 3: return '6:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.seven.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.seven.indexOf(String(num))) {\n                case 0: return '7:s';\n                case 1: return '7:h';\n                case 2: return '7:c';\n                case 3: return '7:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.eight.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.eight.indexOf(String(num))) {\n                case 0: return '8:s';\n                case 1: return '8:h';\n                case 2: return '8:c';\n                case 3: return '8:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.nine.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.nine.indexOf(String(num))) {\n                case 0: return '9:s';\n                case 1: return '9:h';\n                case 2: return '9:c';\n                case 3: return '9:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.ten.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.ten.indexOf(String(num))) {\n                case 0: return '10:s';\n                case 1: return '10:h';\n                case 2: return '10:c';\n                case 3: return '10:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.jack.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.jack.indexOf(String(num))) {\n                case 0: return '11:s';\n                case 1: return '11:h';\n                case 2: return '11:c';\n                case 3: return '11:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.queen.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.queen.indexOf(String(num))) {\n                case 0: return '12:s';\n                case 1: return '12:h';\n                case 2: return '12:c';\n                case 3: return '12:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.king.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.king.indexOf(String(num))) {\n                case 0: return '13:s';\n                case 1: return '13:h';\n                case 2: return '13:c';\n                case 3: return '13:d';\n                default: return 0;\n            }\n        }\n    }\n\n\n\n\n    isRoundOver = (cards, cardsNum) => {\n        if (cards.length === 4) {\n            return true\n        } else if (cardsNum === 20) {\n            return true\n        }\n        return false\n    }\n    showCard = (card) => {\n        if (this.state.selectedCard.indexOf(card) === -1) {\n            this.setState(state => {\n                const selectedCard = state.selectedCard.concat(card)\n                return {\n                    selectedCard,\n                };\n            })\n        } else {\n            var selectedCard = [...this.state.selectedCard]\n            const index = this.state.selectedCard.indexOf(card);\n            selectedCard.splice(index, 1)\n            this.setState({ selectedCard: selectedCard })\n        }\n        return 0;\n    }\n\n\n\n\n    generatePlayersData = () => {\n        const players = this.state.players\n        const p1 = this.state.player1\n        const p2 = this.state.player2\n        const p3 = this.state.player3\n        const p4 = this.state.player4\n        const p5 = this.state.player5\n        players.map(\n            (data, key) => {\n                if (key === 0) {\n                    if (p1.set === false) {\n                        const dataf = data.split('|')\n                        p1.pseudo = dataf[0]\n                        for (let i = 0; i < dataf[1]; i++) { p1.cards.push(0) }\n                        p1.set = true;\n                    }\n                } if (key === 1) {\n                    if (p2.set === false) {\n                        const dataf = data.split('|')\n                        p2.pseudo = dataf[0];\n                        for (let i = 0; i < dataf[1]; i++) { p2.cards.push(0) }\n                        p2.set = true;\n                    }\n                } if (key === 2) {\n                    if (p3.set === false) {\n                        const dataf = data.split('|')\n                        p3.pseudo = dataf[0];\n                        for (let i = 0; i < dataf[1]; i++) { p3.cards.push(0) }\n                        p3.set = true;\n                    }\n                } if (key === 3) {\n                    if (p4.set === false) {\n                        const dataf = data.split('|')\n                        p4.pseudo = dataf[0]\n                        for (let i = 0; i < dataf[1]; i++) { p4.cards.push(0) }\n                        p4.set = true;\n                    }\n                } if (key === 4) {\n                    if (p5.set === false) {\n                        const dataf = data.split('|')\n                        p5.pseudo = dataf[0]\n                        for (let i = 0; i < dataf[1]; i++) { p5.cards.push(0) }\n                        p5.set = true;\n                    }\n                }\n                return 0;\n            }\n        )\n        this.setState({ player1: p1, player2: p2, player3: p3, player4: p4, player5: p5 })\n\n    }\n\n\n    resetError = () => {\n        const error = { type: null, title: null, message: null, variant: null }\n        this.setState({ errorMessage: error })\n    }\n\n    pileTypeCard = () => {\n        const pile = this.state.pile\n        if (pile.length === 0) {\n            return -1\n        }\n        else {\n            const numPile = this.whatCardIs(pile[0]).split(':')\n            if (numPile[0] === 0) {\n                return 10\n            }\n            else {\n                return Number(numPile[0])\n            }\n        }\n    }\n    sameSelectedCard = () => {\n        var selCard = this.state.selectedCard\n        var len = selCard.length\n        var prev1 = this.whatCardIs(selCard[0]).split(':')\n        var prev = prev1[0]\n        if (len === 1) {\n            return Number(prev)\n        }\n        else {\n\n            for (let i = 0; i < len; i++) {\n                const actual = this.whatCardIs(selCard[i]).split(':')\n                if (prev !== actual[0]) {\n                    return -1\n                }\n                prev = actual[0]\n            }\n            return Number(prev)\n        }\n    }\n    canHeStart(){\n        if(this.state.countRound < 1)\n        {\n            const currUser = this.state.currentUser\n            if (this.state.playerCard.indexOf('25') !== -1) {\n                this.setState({ playerToken: 1 })\n                gameSocket.emit('startPlaying', { user: currUser })\n            } else {\n\n            }\n        }\n    }\n    canHePlay = () => {\n        if (this.state.playerToken === 1) {\n            const actualPile = this.state.pile\n            //const playerCard = this.state.playerCard\n            const selCard = this.state.selectedCard\n            const ssc = this.sameSelectedCard()\n            const ptc = this.pileTypeCard()\n            if (actualPile.length > selCard.length && ssc !== 20) {\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You cannot play fewer cards than there are in the pile', variant: 'danger' }\n                this.setState({ errorMessage: error })\n\n            }\n            else if (ssc === -1 && ssc !== 20) {\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You cannot play two cards of different value', variant: 'danger' }\n                this.setState({ errorMessage: error })\n            } else if (ssc < ptc && ssc !== 20) {\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You cannot play one or more cards smaller than those in the pile', variant: 'danger' }\n                this.setState({ errorMessage: error })\n            }\n            else if (actualPile.length - 1 > selCard.length && ssc === 20) {\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You need an extra 2 if you want to cut a series of 3 cards', variant: 'danger' }\n                this.setState({ errorMessage: error })\n            }\n            else {\n\n                const message = { type: 'finish', title: 'You just played', message: 'Wait for your turn.', variant: 'success' }\n\n\n                const user = this.state.currentUser\n                let counter = this.state.countTurn\n                counter++;\n                const copyTable = this.state.orderTurn.slice()\n                const nextUser= copyTable[counter]\n                this.setState({ errorMessage: message, playerToken: 0,countTurn: counter})\n                gameSocket.emit('finishTurn', nextUser)\n\n                this.delSelectedCard()\n                this.changePile(selCard, ssc)\n            }\n\n        }\n        else {\n            const error = { type: 'Not your turn', title: 'You cant play now', message: 'Its not your turn, wait for it.', variant: '' }\n            this.setState({ errorMessage: error })\n        }\n\n    }\n\n    changePile = (newCards, newCardsNum) => {\n\n        if (this.isRoundOver(newCards, newCardsNum) === false) {\n            const game_id= this.state.game_id\n            gameSocket.emit('chgpile', {newcds :newCards, gid : game_id})\n        }\n        else{\n            //switch socket.\n            const game_id= this.state.game_id\n            gameSocket.emit('chgpile', {newcds :newCards, gid : game_id})\n        }\n\n    }\n    playButton = () => {\n        return (\n            <div style={this.state.defStyle}>\n                <Button>Play selected cards</Button>\n            </div>\n        )\n    }\n    isThereErrorMessage = () => {\n        if (this.state.errorMessage.type === 'rules') {\n            return (\n                <Row style={this.state.defStyle}>\n                    <Alert variant={this.state.errorMessage.variant}>\n                        <Alert.Heading>{this.state.errorMessage.title}</Alert.Heading>\n                        {this.state.errorMessage.message}\n                        <br />Check the rules for more informations\n                    </Alert>\n                </Row>\n            )\n        } else if (this.state.errorMessage.type === 'finish') {\n            return (\n                <Row style={this.state.defStyle}>\n                    <Alert variant={this.state.errorMessage.variant} onClose={() => this.resetError()} dismissible>\n                        <Alert.Heading>{this.state.errorMessage.title}</Alert.Heading>\n                        {this.state.errorMessage.message}\n                    </Alert>\n                </Row>\n            )\n        } else if(this.state.errorMessage.type ==='token'){\n            return (\n                <Row style={this.state.defStyle}>\n                    <Alert variant={this.state.errorMessage.variant} onClose={() => this.resetError()} dismissible>\n                        <Alert.Heading>{this.state.errorMessage.title}</Alert.Heading>\n                        {this.state.errorMessage.message}\n                    </Alert>\n                </Row>\n            )\n        }\n\n    }\n    isThere4Players = () => {\n        if (this.state.player4.pseudo !== null) {\n            return (\n                <div>\n                    <Row style={this.state.defStyle}>\n                        {\n                            this.state.player4.cards.map((value, key) => {\n                                return <Carte num={value} index={key} identity='othercards' />\n                            })}\n                    </Row>\n                    <br />\n                    <Row style={this.state.defStyle}>\n                        {this.state.player4.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player4.pseudo}</span> : <span></span>}\n                    </Row>\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <span></span>\n                </div>\n            )\n        }\n    }\n\n    isThere5Players = () => {\n        if (this.state.player5.pseudo !== null) {\n            return (\n                <div>\n                    <Row style={this.state.defStyle}>\n                        {\n                            this.state.player5.cards.map((value, key) => {\n                                return <Carte num={value} index={key} identity='othercards' />\n                            })}\n                    </Row>\n                    <br />\n                    <Row style={this.state.defStyle}>\n                        {this.state.player5.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player5.pseudo}</span> : <span></span>}\n                    </Row>\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <span></span>\n                </div>\n            )\n        }\n    }\n    componentDidMount() {\n        const currUser = this.state.currentUser;\n        const gameId = this.state.gameId\n        gameSocket.on('connection', function (data) {\n\n        })\n        // Requete backend pour savoir les cartes de l'utilisateur local\n        gameSocket.emit('join_game', {gid: this.state.game_id, user: this.state.currentUser})\n        gameSocket.on('userCard',(sdata) => {\n            const json = sdata\n            json.forEach(({ user, card }) => {\n                this.setState(state => {\n                    const playerCard = state.playerCard.concat(card)\n                    return {\n                        playerCard,\n                    };\n                }, this.canHeStart)\n            })\n        })\n        // Requete backend pour avoir le nombre de carte des joueurs\n        gameSocket.on('othersCount',(sdata) =>{\n            const json = sdata\n            this.setState({ playersData: json })\n                json.forEach(({ user, Ncards }) => {\n                    const passerelle = user + '|' + Ncards\n                    this.setState(state => {\n                        const players = state.players.concat(passerelle)\n                        return {\n                            players,\n                        };\n                }, this.generatePlayersData)\n            })\n        })\n\n        gameSocket.on('cardsPot', (sdata) => {\n            const json = sdata\n            json.forEach(({ user, card }) => {\n                this.setState(state => {\n                    const pile = state.pile.concat(card)\n                    return {\n                        pile,\n                    };\n                })\n            })\n        })\n\n        gameSocket.on('newpile', (sdata) =>{\n            const newpile = sdata\n            this.setState({ pile: newpile })\n        })\n\n        gameSocket.on('playerdeconnexion', (sdata) =>{\n            const player = sdata.user;\n        })\n        gameSocket.on('userPlayed', (sdata)=>{\n            let counter = this.state.countTurn\n            counter++;\n            if(sdata===currUser){\n                const msg={ type: 'turn', title: 'La partie a commencé', message: `C'est a toi de jouer chef`, variant: 'success' }\n                this.setState({playerToken: 1, errorMessage : msg})\n            }\n            this.setState({countTurn: counter})\n        })\n        gameSocket.on('gameStarted', (sdata)=>{\n            const msg = { type: 'start', title: 'La partie a commencé', message: `${sdata} dispose de la dame de coeur, il commence la partie`, variant: 'info' }\n            this.setState({errorMessage: msg})\n        })\n        const playerCard=this.state.playerCard\n\n\n    }\n\n    delSelectedCard = () => {\n        const selCard = this.state.selectedCard\n        var userCard = this.state.playerCard\n        gameSocket.emit('delcard',{gid: this.state.game_id, us:this.state.currentUser, sc : this.state.selectedCard, usc : this.state.playerCard})\n        gameSocket.on('delcardReturn', (sdata)=>{\n            const userCard = sdata;\n            this.setState({ playerCard: userCard, selectedCard: [] })\n        })\n    }\n    closeAlert = () => {\n        this.setState({ showAlert: false })\n    }\n\n    componentDidUpdate() {\n    }\n\n\n    render() {\n        return (\n            <div style={{\n                border: '1px solid black',\n                backgroundColor: '#5DAB51',\n\n            }}>\n                <Container fluid>\n                    <Row>\n                        <Col>\n                            {/* Rien */}\n                        </Col>\n                        <Col>\n                            <Container fluid >\n                                <Row style={this.state.defStyle}>\n                                    {\n                                        this.state.player1.cards.map((value, key) => {\n                                            return <Carte num={value} index={key} identity='othercards' />\n                                        })}\n                                </Row>\n                                <br />\n                                <Row style={this.state.defStyle}>\n                                    {this.state.player1.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player1.pseudo}</span> : <span></span>}\n                                </Row>\n                            </Container>\n                        </Col>\n                        <Col>\n                            {/* Rien */}\n                        </Col>\n                    </Row>\n                    <br />\n                    <br />\n                    <Row>\n                        <Col>\n                            <Row style={this.state.defStyle}>\n                                {\n                                    this.state.player2.cards.map((value, key) => {\n                                        return <Carte num={value} index={key} identity='othercards' />\n                                    })}\n                            </Row>\n                            <br />\n                            <Row style={this.state.defStyle}>\n                                {this.state.player2.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player2.pseudo}</span> : <span></span>}\n                            </Row>\n\n                        </Col>\n                        <Col style={{ border: '2px solid red', borderRadius: '10px', }}>\n                            <Row style={this.state.defStyle}>\n                                {this.state.switcher === true ? <span id={String(this.state.switcher)}>Pile</span> : <span id={String(this.state.switcher)}>Pile</span>}\n                            </Row>\n                            <Row style={this.state.defStyle}>\n                                {\n                                    this.state.pile === [] ? <span>VIDE</span> : this.state.pile.map((value, key) => {\n                                        return <Carte num={value} index={key} identity='cards' />\n                                    })\n                                }\n                            </Row>\n                            <br />\n                            <Row>\n\n                            </Row>\n                        </Col>\n                        <Col>\n                            <Row style={this.state.defStyle}>\n                                {\n                                    this.state.player3.cards.map((value, key) => {\n                                        return <Carte num={value} index={key} identity='othercards' />\n                                    })}\n                            </Row>\n                            <br />\n                            <Row style={this.state.defStyle}>\n                                {this.state.player3.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player3.pseudo}</span> : <span></span>}\n                            </Row>\n                        </Col>\n                    </Row>\n                    <br />\n                    <br />\n                    <Row>\n                        <Col>\n                            {this.isThere4Players()}\n                        </Col>\n                        <Col>\n                            {this.isThereErrorMessage()}\n                        </Col>\n                        <Col>\n                            {this.isThere5Players()}\n                        </Col>\n                    </Row>\n                </Container>\n                <br />\n                <br />\n                <Container fluid>\n                    <Row>\n                        {this.state.playerToken ===1 ? <Col style={this.state.defStyle}><Button variant='secondary' block disable>pass</Button></Col> : <Col style={this.state.defStyle}><Button block >pass</Button></Col>}\n                        <Col style={this.state.defStyle}>\n                            {\n                                this.state.playerCard.map((value, index) => {\n                                    if (this.state.selectedCard.indexOf(value) !== -1) {\n                                        return <Carte num={value} index={index} identity='usercards' action={this.showCard} style={this.state.cardStyle} />;\n                                    } else {\n                                        return <Carte num={value} index={index} identity='usercards' action={this.showCard} />;\n                                    }\n                                })\n                            }\n                        </Col>\n                        {this.state.selectedCard.length > 0 ? this.state.playerToken === 1 ? <Col style={this.state.defStyle}><Button onClick={() => this.canHePlay()} block>Play selected cards</Button></Col> :<Col style={this.state.defStyle}><Button variant=\"secondary\" block disabled>Play selected cards</Button></Col> : <Col style={this.state.defStyle}><Button variant=\"secondary\" block disabled>Play selected cards</Button></Col>}\n\n                    </Row>\n                </Container>\n                <br />\n                <br />\n                <br />\n\n                <div></div>\n            </div>\n        )\n    }\n}\n\nexport default Game;\n\n\n\n\n/*{\n            ace :   '1:14:27:40' ,\n            two:    '2:15:28:41',\n            three:  '3:16:29:42',\n            four:   '4:17:30:43',\n            five:   '5:18:31:44',\n            six:    '6:19:32:45',\n            seven:  '7:20:33:46',\n            eight:  '8:21:34:47',\n            nine:   '9:22:35:48',\n            ten:    '10:23:36:49',\n            jack:   '11:24:37:50',\n            queen:  '12:25:38:51',\n            king:   '13:26:39:52',\n\n            } */\n"]},"metadata":{},"sourceType":"module"}