[{"/home/debian/hosting/projet/client/src/index.js":"1","/home/debian/hosting/projet/client/src/App.js":"2","/home/debian/hosting/projet/client/src/components/Navigation.js":"3","/home/debian/hosting/projet/client/src/pages/Login/Login.js":"4","/home/debian/hosting/projet/client/src/pages/Jeu/Jeu.js":"5","/home/debian/hosting/projet/client/src/pages/Rules/Rules.js":"6","/home/debian/hosting/projet/client/src/pages/Howto/Howto.js":"7","/home/debian/hosting/projet/client/src/pages/Profil/Historique.js":"8","/home/debian/hosting/projet/client/src/pages/Profil/Profil.js":"9","/home/debian/hosting/projet/client/src/pages/Signin/Signin.js":"10","/home/debian/hosting/projet/client/src/pages/Game/Game.js":"11","/home/debian/hosting/projet/client/src/components/NavigationAutres.js":"12","/home/debian/hosting/projet/client/src/components/NavigationHisto.js":"13","/home/debian/hosting/projet/client/src/components/NavigationProfil.js":"14","/home/debian/hosting/projet/client/src/components/Carte.js":"15","/home/debian/hosting/projet/client/src/pages/Home/Home.js":"16","/home/debian/hosting/projet/client/src/pages/Home/components/Lobby.js":"17","/home/debian/hosting/projet/client/src/pages/Home/components/Pool.js":"18"},{"size":702,"mtime":1629987899961,"results":"19","hashOfConfig":"20"},{"size":1734,"mtime":1629987899961,"results":"21","hashOfConfig":"20"},{"size":20927,"mtime":1629987899961,"results":"22","hashOfConfig":"20"},{"size":5003,"mtime":1629987899965,"results":"23","hashOfConfig":"20"},{"size":282,"mtime":1629987899965,"results":"24","hashOfConfig":"20"},{"size":7029,"mtime":1629987899965,"results":"25","hashOfConfig":"20"},{"size":3579,"mtime":1629987899965,"results":"26","hashOfConfig":"20"},{"size":2539,"mtime":1629987899965,"results":"27","hashOfConfig":"20"},{"size":5733,"mtime":1629987899965,"results":"28","hashOfConfig":"20"},{"size":8903,"mtime":1629987899965,"results":"29","hashOfConfig":"20"},{"size":28025,"mtime":1629987899961,"results":"30","hashOfConfig":"20"},{"size":1072,"mtime":1629987899961,"results":"31","hashOfConfig":"20"},{"size":2313,"mtime":1629987899961,"results":"32","hashOfConfig":"20"},{"size":2321,"mtime":1629987899961,"results":"33","hashOfConfig":"20"},{"size":788,"mtime":1629987899961,"results":"34","hashOfConfig":"20"},{"size":27064,"mtime":1629987899961,"results":"35","hashOfConfig":"20"},{"size":1166,"mtime":1629987899965,"results":"36","hashOfConfig":"20"},{"size":829,"mtime":1629987899965,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pl9fs",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},"/home/debian/hosting/projet/client/src/index.js",[],"/home/debian/hosting/projet/client/src/App.js",[],"/home/debian/hosting/projet/client/src/components/Navigation.js",["80"],"import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { ButtonGroup, Button, Row, Col, Container } from 'react-bootstrap';\nimport Home from '../pages/Home/Home';\nimport Howto from '../pages/Howto/Howto'; \nimport Rules from '../pages/Rules/Rules';\nimport CookieConsent from 'react-cookie-consent';\nimport Popup from 'reactjs-popup';\n\n//import Login from '../pages/Login/Login'\n\nclass Navigation extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state={\n           connected: localStorage.getItem('Connect'),\n           connectedAsGuest: localStorage.getItem('ConnectedAsGuest'),\n           guestPseudo : localStorage.getItem('guestPseudo'),\n           cookiesAccept : localStorage.getItem('Cookies'),\n           donneesGuest:''\n        \n        \n           } \n        this.handleClick = this.handleClick.bind(this);\n        this.handleLoginGuest = this.handleLoginGuest.bind(this);\n        \n      }\n    \n\n  \n    pageSwitch= () => {\n\n        const actualPage = this.props.actualPage;\n        switch(actualPage){\n            \n            case 'howto':\n                return <Howto/>;\n            case 'rules':\n                return <Rules/>;\n            default :\n                return <Home OnClick = {this.createGame}/>;\n        }\n      }\n\n    createGame = (name) => {\n        this.props.actionSwitchPage(name);\n    }\n\n\n    handleClick=() => {\n        this.setState({connected: false})\n        localStorage.setItem('Connect', false)\n        this.setState({connectedAsGuest: false})\n        localStorage.setItem('ConnectedAsGuest', false)\n        window.location.href= \"http://135.125.101.210/\"\n        \n    }\n\n    async handleLoginGuest(event){\n        event.preventDefault();\n        localStorage.setItem('ConnectedAsGuest', true)\n        console.log(this.state.guestPseudo)\n        fetch('http://135.125.101.210:5000/guest', {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                \"Acces-Control-Allow-Origin\": \"true\"\n            },\n        }).then(response => response.json())\n            .then(json => {\n                \n            }).catch((error) => {\n\n            });\n            \n            \n            \n            \n            //afficher en tant qu'user connecté\n\n        console.log(this.state.donneesGuest.Pseudo)\n           \n        \n\n\n        await fetch(`http://135.125.101.210:5000/pseudoguest`)\n          .then(response => response.json())\n          .then(json => {\n            this.setState({donneesGuest: json[0].Pseudo})\n            \n          })\n          \n          \n        \n        localStorage.setItem('guestPseudo', this.state.donneesGuest)  \n        window.location.href= \"http://135.125.101.210/\"  \n    }\n\n    \n    render() {\n        \n        if(this.state.connected===\"true\"){\n            return (\n                <main id=\"maincomponent\">\n                    <Container fluid=\"lg\">\n                        <Row>\n                            <Col md=\"auto\" style={{\n                                border: '2px solid moccasin',\n                                borderRadius: '10px',\n                                backgroundColor: 'palegoldenrod'\n                            }}>\n                                <NavLink to=\"/\" exact className=\"hover\" activeClassName='nav-active'>\n                                    <h1 style={{\n                                        fontSize: 64,\n                                    }}>Président Online</h1>\n                                </NavLink>\n                            </Col>\n                            <Col />\n                            <Col />\n                            <Col />\n                            <Col md='auto'>\n    \n                                {/* On déplacera le contenu de ce container par une fonction Auth qui, lors de la connexion affichera un bouton profil */}\n                                <Container fluid=\"lg\" style={{\n                                    border: '2px solid moccasin',\n                                    borderRadius: '10px',\n                                    backgroundColor: 'palegoldenrod'\n                                }}>\n                                    <Row className=\"justify-content-md-center\">\n                                        <Col md={8}>\n                                            <h2 style={{ textAlign: \"center\", fontSize: 32 }}> Account </h2>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col sm='auto'>\n                                            <NavLink to=\"/profile\" className=\"hover\" activeClassName='nav-active'>\n                                                <h4 style={{ textAlign: \"center\", fontSize: 24 }}>Profile</h4>\n                                            </NavLink>\n                                            <Button onClick={this.handleClick}>Log out</Button>\n                                        </Col>\n                                        <Col />\n                                    </Row>\n                                </Container>\n                            </Col>\n                        </Row>\n                    </Container>\n                    <br/>\n                    <Container fluid=\"lg\">\n                        <Row>\n                            <Col fluid=\"md\" lg={2}>\n                                <Container style={{\n                                    height: 'auto',\n                                }}>\n                                    <Col md='auto' style={{\n                                        border: '2px solid moccasin',\n                                        borderRadius: '10px',\n                                        backgroundColor: 'palegoldenrod',\n                                        height: '400px'\n                                    }}>\n                                        <Row>\n                                            <h2 style={{\n                                                display: 'block',\n                                                margin: 'auto'\n                                            }}> Menu </h2>\n                                        </Row>\n                                        <br /><br />\n                                        <Row className=\"justify-content-md-center\">\n                                            <ButtonGroup vertical center>\n                                                <Button\n                                                    variant=\"outline-info\"\n                                                    size=\"lg\"\n                                                    onClick={() => this.props.actionSwitchPage(\"home\")}\n                                                >Home</Button>\n                                                <br />\n                                                <Button\n                                                    variant=\"outline-info\"\n                                                    size=\"lg\"\n                                                    onClick={() => this.props.actionSwitchPage(\"howto\")}\n                                                >How to play ?</Button>\n                                                <br />\n                                                <Button\n                                                    variant=\"outline-info\"\n                                                    size=\"lg\"\n                                                    onClick={() => this.props.actionSwitchPage(\"rules\")}\n                                                >Rules</Button>\n                                            </ButtonGroup>\n                                        </Row>\n                                    </Col>\n                                </Container>\n                            </Col>\n                            <Col fluid>\n                                {this.pageSwitch()}\n                            </Col>\n                        </Row>\n    \n                    </Container>\n                    <CookieConsent\n                                onAccept={localStorage.setItem('Cookies',true)}\n                                location=\"bottom\"\n                                style={{ backgroundColor : 'DarkRed', fontSize:20}}\n                                buttonStyle={{backgroundColor:\"palegoldenrod\", fontSize:20}}\n                                buttonText=\"I agree !\"\n                                expires={365}>\n                             \n                                This website uses cookies, accept them to remove the banner\n                    </CookieConsent> \n                </main>\n            );\n                                        \n        }\n\n        if(this.state.connectedAsGuest===\"true\"){\n            return (\n                <main id=\"maincomponent\">\n                    <Container fluid=\"lg\">\n                        <Row>\n                            <Col md=\"auto\" style={{\n                                border: '2px solid moccasin',\n                                borderRadius: '10px',\n                                backgroundColor: 'palegoldenrod'\n                            }}>\n                                <NavLink to=\"/\" exact className=\"hover\" activeClassName='nav-active'>\n                                    <h1 style={{\n                                        fontSize: 64,\n                                    }}>Président Online</h1>\n                                </NavLink>\n                            </Col>\n                            <Col />\n                            <Col />\n                            <Col />\n                            <Col md='auto'>\n    \n                                {/* On déplacera le contenu de ce container par une fonction Auth qui, lors de la connexion affichera un bouton profil */}\n                                <Container fluid=\"lg\" style={{\n                                    border: '2px solid moccasin',\n                                    borderRadius: '10px',\n                                    backgroundColor: 'palegoldenrod'\n                                }}>\n                                    \n                                    <Row>\n                                        <Col sm='auto'>\n                                            <Button onClick={this.handleClick}>Log out</Button>\n                                        </Col>\n                                        <Col />\n                                    </Row>\n                                </Container>\n                            </Col>\n                        </Row>\n                    </Container>\n                    <br/>\n                    <Container fluid=\"lg\">\n                        <Row>\n                            <Col fluid=\"md\" lg={2}>\n                                <Container style={{\n                                    height: 'auto',\n                                }}>\n                                    <Col md='auto' style={{\n                                        border: '2px solid moccasin',\n                                        borderRadius: '10px',\n                                        backgroundColor: 'palegoldenrod',\n                                        height: '400px'\n                                    }}>\n                                        <Row>\n                                            <h2 style={{\n                                                display: 'block',\n                                                margin: 'auto'\n                                            }}> Menu </h2>\n                                        </Row>\n                                        <br /><br />\n                                        <Row className=\"justify-content-md-center\">\n                                            <ButtonGroup vertical center>\n                                                <Button\n                                                    variant=\"outline-info\"\n                                                    size=\"lg\"\n                                                    onClick={() => this.props.actionSwitchPage(\"home\")}\n                                                >Home</Button>\n                                                <br />\n                                                <Button\n                                                    variant=\"outline-info\"\n                                                    size=\"lg\"\n                                                    onClick={() => this.props.actionSwitchPage(\"howto\")}\n                                                >How to play ?</Button>\n                                                <br />\n                                                <Button\n                                                    variant=\"outline-info\"\n                                                    size=\"lg\"\n                                                    onClick={() => this.props.actionSwitchPage(\"rules\")}\n                                                >Rules</Button>\n                                            </ButtonGroup>\n                                        </Row>\n                                    </Col>\n                                </Container>\n                            </Col>\n                            <Col fluid>\n                                {this.pageSwitch()}\n                            </Col>\n                        </Row>\n    \n                    </Container>\n\n                    <CookieConsent\n                                onAccept={localStorage.setItem('Cookies',true)}\n                                location=\"bottom\"\n                                style={{ backgroundColor : 'DarkRed', fontSize:20}}\n                                buttonStyle={{backgroundColor:\"palegoldenrod\", fontSize:20}}\n                                buttonText=\"I agree !\"\n                                expires={365}>\n                             \n                                This website uses cookies, accept them to remove the banner\n                    </CookieConsent>\n                </main>\n            );\n                                        \n        } \n\n    \n        else{\n            return (\n                <main id=\"maincomponent\">\n                    <Container fluid=\"lg\">\n                        <Row>\n                            <Col md=\"auto\" style={{\n                                border: '2px solid moccasin',\n                                borderRadius: '10px',\n                                backgroundColor: 'palegoldenrod'\n                            }}>\n                                <NavLink to=\"/\" exact className=\"hover\" activeClassName='nav-active'>\n                                    <h1 style={{\n                                        fontSize: 64,\n                                    }}>Président Online</h1>\n                                </NavLink>\n                            </Col>\n                            <Col />\n                            <Col />\n                            <Col />\n                            <Col md='auto'>\n    \n                                {/* On déplacera le contenu de ce container par une fonction Auth qui, lors de la connexion affichera un bouton profil */}\n                                <Container fluid=\"lg\" style={{\n                                    border: '2px solid moccasin',\n                                    borderRadius: '10px',\n                                    backgroundColor: 'palegoldenrod'\n                                }}>\n                                    \n                                    <Row>\n                                        <Col sm='auto'>\n                                            <NavLink to=\"/signin\" className=\"hover\" activeClassName='nav-active'>\n                                                <h4 style={{ textAlign: \"center\", fontSize: 24 }}>Sign In</h4>\n                                            </NavLink>\n                                        </Col>\n                                        <Col />\n                                        <Col sm='auto'>\n                                            <NavLink to=\"/login\" className=\"hover\" activeClassName='nav-active'>\n                                                <h4 style={{ textAlign: \"center\", fontSize: 24 }}>Log In</h4>\n                                            </NavLink>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col>\n                                        <Button\n                                            variant=\"outline-info\"\n                                            size=\"lg\"\n                                            onClick={this.handleLoginGuest}    \n                                        >\n                                            Log in as a guest\n                                        </Button>\n                                        </Col>\n                                    </Row>\n                                </Container>\n                            </Col>\n                        </Row>\n                    </Container>\n                    <br/>\n                    <Container fluid>\n                        <Row fluid=\"xl\"> \n                            <Col fluid=\"md\" lg={2}>\n                                <Container style={{\n                                    height: 'auto',\n                                }}>\n                                    <Col md='auto' style={{\n                                        border: '2px solid moccasin',\n                                        borderRadius: '10px',\n                                        backgroundColor: 'palegoldenrod',\n                                        height: '400px'\n                                    }}>\n                                        <Row>\n                                            <h2 style={{\n                                                display: 'block',\n                                                margin: 'auto'\n                                            }}> Menu </h2>\n                                        </Row>\n                                        <br /><br />\n                                        <Row className=\"justify-content-md-center\">\n                                            <ButtonGroup vertical center>\n                                                <Button\n                                                    variant=\"outline-info\"\n                                                    size=\"lg\"\n                                                    onClick={() => this.props.actionSwitchPage(\"home\")}\n                                                >Home</Button>\n                                                <br />\n                                                <Button\n                                                    variant=\"outline-info\"\n                                                    size=\"lg\"\n                                                    onClick={() => this.props.actionSwitchPage(\"howto\")}\n                                                >How to play ?</Button>\n                                                <br />\n                                                <Button\n                                                    variant=\"outline-info\"\n                                                    size=\"lg\"\n                                                    onClick={() => this.props.actionSwitchPage(\"rules\")}\n                                                >Rules</Button>\n                                            </ButtonGroup>\n                                        </Row>\n                                    </Col>\n                                </Container>\n                            </Col>\n                            <Col className=\"justify-content-xl-center\">\n                                {this.pageSwitch()}\n                            </Col>\n                        </Row>\n    \n                    </Container>\n                    \n                    <CookieConsent\n                                onAccept={localStorage.setItem('Cookies',true)}\n                                location=\"bottom\"\n                                style={{ backgroundColor : 'DarkRed', fontSize:20}}\n                                buttonStyle={{backgroundColor:\"palegoldenrod\", fontSize:20}}\n                                buttonText=\"I agree !\"\n                                expires={365}>\n                             \n                                This website uses cookies, accept them to remove the banner\n                    </CookieConsent>\n                \n                </main>\n            );\n        }\n        \n    };\n}\n\nexport default Navigation;\n","/home/debian/hosting/projet/client/src/pages/Login/Login.js",["81"],"import React from \"react\";\nimport NavigationAutres from \"../../components/NavigationAutres\";\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Container from 'react-bootstrap/Container'\nimport CookieConsent from 'react-cookie-consent';\n\nclass Signin extends React.Component {\n\n    constructor(props) {\n        super(props);\n       \n        this.state={\n            email:'',\n            password:'',\n            bdd:'',\n            emailsPassbdd:'',\n            connected:false,\n            passwordtest:'',\n            \n   \n        }\n        \n\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n\n      \n\n      \n\n      handleSubmit(event) {\n        event.preventDefault();\n        \n\n\n        \n       \n\n        for (let i=0; i<this.state.bdd.length;i++){\n            if (this.state.email !== this.state.bdd[i].Email){\n            }\n            else{\n                //alert(\"Mail in bdd\")\n                this.state.passwordtest = this.state.bdd[i].Password\n                /*let pass=this.state.password\n                var bcrypt = require('bcryptjs');\n                bcrypt.genSalt(10,function(err,salt){\n                    bcrypt.hash(pass, salt, function(err, hash){\n                    })\n                })*/\n                \n                var bcrypt = require('bcryptjs');\n                bcrypt.compare( this.state.password,this.state.bdd[i].Password, function(err,res){\n                    if(res){\n                        \n                        localStorage.setItem('Connect', true)\n                        \n                        window.location.href= \"http://135.125.101.210/\"\n                        }\n                       \n                })\n                \n                localStorage.setItem('Email', this.state.email)\n                localStorage.setItem('Pseudo', this.state.bdd[i].Pseudo)\n                localStorage.getItem('Connect')\n                /*\n                localStorage.setItem('Connect', true)\n                localStorage.setItem('Email', this.state.email)\n                localStorage.setItem('Pseudo', this.state.bdd[i].Pseudo)\n                localStorage.getItem('Connect')\n                window.location.href= \"http://135.125.101.210/\" */\n            }\n        }\n      }\n\n      componentDidMount(){\n        localStorage.setItem('Connect',false)\n          fetch('http://135.125.101.210:5000/loginall')\n          .then(response => response.json())\n          .then(json => {\n            \n            this.setState({bdd: json})\n            \n          })\n      }\n\n     \n\n    render() {\n        return (\n            <html>\n                <Row>  \n                    <Col>\n                        <div class=\"hautpage\">\n                            <NavigationAutres />\n                        </div> \n                    </Col> \n                </Row>\n                <Row>\n                    <Col>\n                        <form onSubmit={this.handleSubmit}>\n                            <Container>\n                                <Col className=\"mt-5\">\n                                    <label style={{textAlign: \"center\", fontSize: 30, color:'white',marginTop:'10%',marginLeft:'33%',marginRight:'67%'}}>\n                                        Email :\n                                        <input type=\"text\" value={this.state.email} onChange={text => this.setState({email: text.target.value})} />\n                                    </label>\n                                </Col>\n                                <Col className=\"mt-5\">\n                                    <label style={{textAlign: \"center\", fontSize: 30, color:'white',marginTop:'4%',marginLeft:'33%',marginRight:'67%'}}>\n                                        Password :\n                                        <input type=\"password\" value={this.state.password} onChange={text => this.setState({password: text.target.value})} />\n                                    </label>\n                                    <br></br><br></br><br></br>\n                                    <input style={{textAlign: \"center\", fontSize: 45, color:'red',marginTop:'5%', marginLeft:'39%'}} type=\"submit\" value=\"Connexion\" />\n                                </Col>\n                            </Container>\n                        </form>  \n                    </Col>\n                </Row> \n                <CookieConsent\n                                onAccept={localStorage.setItem('Cookies',true)}\n                                location=\"bottom\"\n                                style={{ backgroundColor : 'DarkRed', fontSize:20}}\n                                buttonStyle={{backgroundColor:\"palegoldenrod\", fontSize:20}}\n                                buttonText=\"I agree !\"\n                                expires={365}>\n                             \n                                This website uses cookies, accept them to remove the banner\n                </CookieConsent>    \n            </html>\n        );\n    }\n}\n\nexport default Signin","/home/debian/hosting/projet/client/src/pages/Jeu/Jeu.js",[],"/home/debian/hosting/projet/client/src/pages/Rules/Rules.js",[],"/home/debian/hosting/projet/client/src/pages/Howto/Howto.js",[],"/home/debian/hosting/projet/client/src/pages/Profil/Historique.js",[],"/home/debian/hosting/projet/client/src/pages/Profil/Profil.js",[],"/home/debian/hosting/projet/client/src/pages/Signin/Signin.js",[],"/home/debian/hosting/projet/client/src/pages/Game/Game.js",["82","83","84","85","86","87"],"import React, { Component } from \"react\";\nimport { Button, Row, Col, Container, Alert } from 'react-bootstrap';\nimport Carte from '../../components/Carte'\nimport io from \"socket.io-client\";\n\n/* TODO :   connexion a la game\n            token\n\n            Reconnection si deco\n            fin de round\n            fin de game\n            envoi stats\n            page de fin\n\n*/\nlet gameSocket\n\nclass Game extends Component {\n\n    constructor() {\n        super();\n\n        /*********** Global Variables ***********/\n\n        this.state = {\n            /* Usefull variables*/\n            playerToken: 0,\n            selectedCard: [],\n            switcher: false,\n            errorMessage: { type: null, title: null, message: null, variant: null },\n            game_id : localStorage.getItem('gameId'),\n            currentUser: localStorage.getItem('pseudo'),\n            orderTurn: localStorage.getItem('turn').split(','),\n            countTurn: 0,\n            countRound: 0,\n\n            /* Test variable */\n            testChgPile: [5, 18],\n            testChgPile2: [13],\n\n            /* socket io */\n            connectionConfig: {\n                \"force new connection\": true,\n                \"reconnectionAttemps\": \"Infinity\",\n                \"timeout\": 75,\n                \"transports\": [\"websocket\",\"polling\"],\n                \"path\": '/app1socket'\n            },\n            endpoint: 'htpp://135.125.101.210:5002/app1socket',\n\n            /* RAW DATA */\n            playersData: null,\n            data: null,\n\n            /* PLAYERS */\n            players: [],\n            player1: { pseudo: null, cards: [], set: false, connected : false },\n            player2: { pseudo: null, cards: [], set: false, connected : false },\n            player3: { pseudo: null, cards: [], set: false, connected : false },\n            player4: { pseudo: null, cards: [], set: false, connected : false },\n            player5: { pseudo: null, cards: [], set: false, connected : false },\n\n            /* STYLE */\n            defStyle: { display: 'flex', justifyContent: 'center', alignItems: 'center' },\n            cardStyle: { border: '2px solid red', borderRadius: '10px', },\n\n            /* VISIBLE CARDS */\n            pile: [],\n            playerCard: [],\n\n            /* List of all card, refers to their .png */\n            cardList: {\n                ace: ['1', '14', '27', '40'],\n                two: ['2', '15', '28', '41'],\n                three: ['3', '16', '29', '42'],\n                four: ['4', '17', '30', '43'],\n                five: ['5', '18', '31', '44'],\n                six: ['6', '19', '32', '45'],\n                seven: ['7', '20', '33', '46'],\n                eight: ['8', '21', '34', '47'],\n                nine: ['9', '22', '35', '48'],\n                ten: ['10', '23', '36', '49'],\n                jack: ['11', '24', '37', '50'],\n                queen: ['12', '25', '38', '51'],\n                king: ['13', '26', '39', '52'],\n\n            }\n\n        }\n        gameSocket = io.connect(this.state.endpoint, this.state.connectionConfig)\n\n    }\n\n    /********************** Game Function **********************/\n\n    /***********  ***********/\n\n    whatCardIs = (num) => {\n        // RETURN -1 IF NOT\n        if (this.state.cardList.ace.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.ace.indexOf(String(num))) {\n                case 0: return '15:s';\n                case 1: return '15:h';\n                case 2: return '15:c';\n                case 3: return '15:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.two.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.two.indexOf(String(num))) {\n                case 0: return '20:s';\n                case 1: return '20:h';\n                case 2: return '20:c';\n                case 3: return '20:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.three.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.three.indexOf(String(num))) {\n                case 0: return '3:s';\n                case 1: return '3:h';\n                case 2: return '3:c';\n                case 3: return '3:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.four.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.four.indexOf(String(num))) {\n                case 0: return '4:s';\n                case 1: return '4:h';\n                case 2: return '4:c';\n                case 3: return '4:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.five.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.five.indexOf(String(num))) {\n                case 0: return '5:s';\n                case 1: return '5:h';\n                case 2: return '5:c';\n                case 3: return '5:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.six.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.six.indexOf(String(num))) {\n                case 0: return '6:s';\n                case 1: return '6:h';\n                case 2: return '6:c';\n                case 3: return '6:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.seven.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.seven.indexOf(String(num))) {\n                case 0: return '7:s';\n                case 1: return '7:h';\n                case 2: return '7:c';\n                case 3: return '7:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.eight.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.eight.indexOf(String(num))) {\n                case 0: return '8:s';\n                case 1: return '8:h';\n                case 2: return '8:c';\n                case 3: return '8:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.nine.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.nine.indexOf(String(num))) {\n                case 0: return '9:s';\n                case 1: return '9:h';\n                case 2: return '9:c';\n                case 3: return '9:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.ten.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.ten.indexOf(String(num))) {\n                case 0: return '10:s';\n                case 1: return '10:h';\n                case 2: return '10:c';\n                case 3: return '10:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.jack.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.jack.indexOf(String(num))) {\n                case 0: return '11:s';\n                case 1: return '11:h';\n                case 2: return '11:c';\n                case 3: return '11:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.queen.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.queen.indexOf(String(num))) {\n                case 0: return '12:s';\n                case 1: return '12:h';\n                case 2: return '12:c';\n                case 3: return '12:d';\n                default: return 0;\n            }\n        } else if (this.state.cardList.king.indexOf(String(num)) !== -1) {\n            switch (this.state.cardList.king.indexOf(String(num))) {\n                case 0: return '13:s';\n                case 1: return '13:h';\n                case 2: return '13:c';\n                case 3: return '13:d';\n                default: return 0;\n            }\n        }\n    }\n\n\n\n\n    isRoundOver = (cards, cardsNum) => {\n        if (cards.length === 4) {\n            return true\n        } else if (cardsNum === 20) {\n            return true\n        }\n        return false\n    }\n    showCard = (card) => {\n        if (this.state.selectedCard.indexOf(card) === -1) {\n            this.setState(state => {\n                const selectedCard = state.selectedCard.concat(card)\n                return {\n                    selectedCard,\n                };\n            })\n        } else {\n            var selectedCard = [...this.state.selectedCard]\n            const index = this.state.selectedCard.indexOf(card);\n            selectedCard.splice(index, 1)\n            this.setState({ selectedCard: selectedCard })\n        }\n        return 0;\n    }\n\n\n\n\n    generatePlayersData = () => {\n        const players = this.state.players\n        const p1 = this.state.player1\n        const p2 = this.state.player2\n        const p3 = this.state.player3\n        const p4 = this.state.player4\n        const p5 = this.state.player5\n        players.map(\n            (data, key) => {\n                if (key === 0) {\n                    if (p1.set === false) {\n                        const dataf = data.split('|')\n                        p1.pseudo = dataf[0]\n                        for (let i = 0; i < dataf[1]; i++) { p1.cards.push(0) }\n                        p1.set = true;\n                    }\n                } if (key === 1) {\n                    if (p2.set === false) {\n                        const dataf = data.split('|')\n                        p2.pseudo = dataf[0];\n                        for (let i = 0; i < dataf[1]; i++) { p2.cards.push(0) }\n                        p2.set = true;\n                    }\n                } if (key === 2) {\n                    if (p3.set === false) {\n                        const dataf = data.split('|')\n                        p3.pseudo = dataf[0];\n                        for (let i = 0; i < dataf[1]; i++) { p3.cards.push(0) }\n                        p3.set = true;\n                    }\n                } if (key === 3) {\n                    if (p4.set === false) {\n                        const dataf = data.split('|')\n                        p4.pseudo = dataf[0]\n                        for (let i = 0; i < dataf[1]; i++) { p4.cards.push(0) }\n                        p4.set = true;\n                    }\n                } if (key === 4) {\n                    if (p5.set === false) {\n                        const dataf = data.split('|')\n                        p5.pseudo = dataf[0]\n                        for (let i = 0; i < dataf[1]; i++) { p5.cards.push(0) }\n                        p5.set = true;\n                    }\n                }\n                return 0;\n            }\n        )\n        this.setState({ player1: p1, player2: p2, player3: p3, player4: p4, player5: p5 })\n\n    }\n\n\n    resetError = () => {\n        const error = { type: null, title: null, message: null, variant: null }\n        this.setState({ errorMessage: error })\n    }\n\n    pileTypeCard = () => {\n        const pile = this.state.pile\n        if (pile.length === 0) {\n            return -1\n        }\n        else {\n            const numPile = this.whatCardIs(pile[0]).split(':')\n            if (numPile[0] === 0) {\n                return 10\n            }\n            else {\n                return Number(numPile[0])\n            }\n        }\n    }\n    sameSelectedCard = () => {\n        var selCard = this.state.selectedCard\n        var len = selCard.length\n        var prev1 = this.whatCardIs(selCard[0]).split(':')\n        var prev = prev1[0]\n        if (len === 1) {\n            return Number(prev)\n        }\n        else {\n\n            for (let i = 0; i < len; i++) {\n                const actual = this.whatCardIs(selCard[i]).split(':')\n                if (prev !== actual[0]) {\n                    return -1\n                }\n                prev = actual[0]\n            }\n            return Number(prev)\n        }\n    }\n    canHeStart(){\n        if(this.state.countRound < 1)\n        {\n            const currUser = this.state.currentUser\n            if (this.state.playerCard.indexOf('25') !== -1) {\n                this.setState({ playerToken: 1 })\n                gameSocket.emit('startPlaying', { user: currUser })\n            } else {\n\n            }\n        }\n    }\n    canHePlay = () => {\n        if (this.state.playerToken === 1) {\n            const actualPile = this.state.pile\n            //const playerCard = this.state.playerCard\n            const selCard = this.state.selectedCard\n            const ssc = this.sameSelectedCard()\n            const ptc = this.pileTypeCard()\n            if (actualPile.length > selCard.length && ssc !== 20) {\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You cannot play fewer cards than there are in the pile', variant: 'danger' }\n                this.setState({ errorMessage: error })\n\n            }\n            else if (ssc === -1 && ssc !== 20) {\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You cannot play two cards of different value', variant: 'danger' }\n                this.setState({ errorMessage: error })\n            } else if (ssc < ptc && ssc !== 20) {\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You cannot play one or more cards smaller than those in the pile', variant: 'danger' }\n                this.setState({ errorMessage: error })\n            }\n            else if (actualPile.length - 1 > selCard.length && ssc === 20) {\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You need an extra 2 if you want to cut a series of 3 cards', variant: 'danger' }\n                this.setState({ errorMessage: error })\n            }\n            else {\n\n                const message = { type: 'finish', title: 'You just played', message: 'Wait for your turn.', variant: 'success' }\n\n\n                const user = this.state.currentUser\n                let counter = this.state.countTurn\n                counter++;\n                const copyTable = this.state.orderTurn.slice()\n                const nextUser= copyTable[counter]\n                this.setState({ errorMessage: message, playerToken: 0,countTurn: counter})\n                gameSocket.emit('finishTurn', nextUser)\n\n                this.delSelectedCard()\n                this.changePile(selCard, ssc)\n            }\n\n        }\n        else {\n            const error = { type: 'Not your turn', title: 'You cant play now', message: 'Its not your turn, wait for it.', variant: '' }\n            this.setState({ errorMessage: error })\n        }\n\n    }\n\n    changePile = (newCards, newCardsNum) => {\n\n        if (this.isRoundOver(newCards, newCardsNum) === false) {\n            const game_id= this.state.game_id\n            gameSocket.emit('chgpile', {newcds :newCards, gid : game_id})\n        }\n        else{\n            //switch socket.\n            const game_id= this.state.game_id\n            gameSocket.emit('chgpile', {newcds :newCards, gid : game_id})\n        }\n\n    }\n    playButton = () => {\n        return (\n            <div style={this.state.defStyle}>\n                <Button>Play selected cards</Button>\n            </div>\n        )\n    }\n    isThereErrorMessage = () => {\n        if (this.state.errorMessage.type === 'rules') {\n            return (\n                <Row style={this.state.defStyle}>\n                    <Alert variant={this.state.errorMessage.variant}>\n                        <Alert.Heading>{this.state.errorMessage.title}</Alert.Heading>\n                        {this.state.errorMessage.message}\n                        <br />Check the rules for more informations\n                    </Alert>\n                </Row>\n            )\n        } else if (this.state.errorMessage.type === 'finish') {\n            return (\n                <Row style={this.state.defStyle}>\n                    <Alert variant={this.state.errorMessage.variant} onClose={() => this.resetError()} dismissible>\n                        <Alert.Heading>{this.state.errorMessage.title}</Alert.Heading>\n                        {this.state.errorMessage.message}\n                    </Alert>\n                </Row>\n            )\n        } else if(this.state.errorMessage.type ==='token'){\n            return (\n                <Row style={this.state.defStyle}>\n                    <Alert variant={this.state.errorMessage.variant} onClose={() => this.resetError()} dismissible>\n                        <Alert.Heading>{this.state.errorMessage.title}</Alert.Heading>\n                        {this.state.errorMessage.message}\n                    </Alert>\n                </Row>\n            )\n        }\n\n    }\n    isThere4Players = () => {\n        if (this.state.player4.pseudo !== null) {\n            return (\n                <div>\n                    <Row style={this.state.defStyle}>\n                        {\n                            this.state.player4.cards.map((value, key) => {\n                                return <Carte num={value} index={key} identity='othercards' />\n                            })}\n                    </Row>\n                    <br />\n                    <Row style={this.state.defStyle}>\n                        {this.state.player4.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player4.pseudo}</span> : <span></span>}\n                    </Row>\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <span></span>\n                </div>\n            )\n        }\n    }\n\n    isThere5Players = () => {\n        if (this.state.player5.pseudo !== null) {\n            return (\n                <div>\n                    <Row style={this.state.defStyle}>\n                        {\n                            this.state.player5.cards.map((value, key) => {\n                                return <Carte num={value} index={key} identity='othercards' />\n                            })}\n                    </Row>\n                    <br />\n                    <Row style={this.state.defStyle}>\n                        {this.state.player5.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player5.pseudo}</span> : <span></span>}\n                    </Row>\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <span></span>\n                </div>\n            )\n        }\n    }\n    componentDidMount() {\n        const currUser = this.state.currentUser;\n        const gameId = this.state.gameId\n        gameSocket.on('connection', function (data) {\n\n        })\n        // Requete backend pour savoir les cartes de l'utilisateur local\n        gameSocket.emit('join_game', {gid: this.state.game_id, user: this.state.currentUser})\n        gameSocket.on('userCard',(sdata) => {\n            const json = sdata\n            json.forEach(({ user, card }) => {\n                this.setState(state => {\n                    const playerCard = state.playerCard.concat(card)\n                    return {\n                        playerCard,\n                    };\n                }, this.canHeStart)\n            })\n        })\n        // Requete backend pour avoir le nombre de carte des joueurs\n        gameSocket.on('othersCount',(sdata) =>{\n            const json = sdata\n            this.setState({ playersData: json })\n                json.forEach(({ user, Ncards }) => {\n                    const passerelle = user + '|' + Ncards\n                    this.setState(state => {\n                        const players = state.players.concat(passerelle)\n                        return {\n                            players,\n                        };\n                }, this.generatePlayersData)\n            })\n        })\n\n        gameSocket.on('cardsPot', (sdata) => {\n            const json = sdata\n            json.forEach(({ user, card }) => {\n                this.setState(state => {\n                    const pile = state.pile.concat(card)\n                    return {\n                        pile,\n                    };\n                })\n            })\n        })\n\n        gameSocket.on('newpile', (sdata) =>{\n            const newpile = sdata\n            this.setState({ pile: newpile })\n        })\n\n        gameSocket.on('playerdeconnexion', (sdata) =>{\n            const player = sdata.user;\n        })\n        gameSocket.on('userPlayed', (sdata)=>{\n            let counter = this.state.countTurn\n            counter++;\n            if(sdata===currUser){\n                const msg={ type: 'turn', title: 'La partie a commencé', message: `C'est a toi de jouer chef`, variant: 'success' }\n                this.setState({playerToken: 1, errorMessage : msg})\n            }\n            this.setState({countTurn: counter})\n        })\n        gameSocket.on('gameStarted', (sdata)=>{\n            const msg = { type: 'start', title: 'La partie a commencé', message: `${sdata} dispose de la dame de coeur, il commence la partie`, variant: 'info' }\n            this.setState({errorMessage: msg})\n        })\n        const playerCard=this.state.playerCard\n\n\n    }\n\n    delSelectedCard = () => {\n        const selCard = this.state.selectedCard\n        var userCard = this.state.playerCard\n        gameSocket.emit('delcard',{gid: this.state.game_id, us:this.state.currentUser, sc : this.state.selectedCard, usc : this.state.playerCard})\n        gameSocket.on('delcardReturn', (sdata)=>{\n            const userCard = sdata;\n            this.setState({ playerCard: userCard, selectedCard: [] })\n        })\n    }\n    closeAlert = () => {\n        this.setState({ showAlert: false })\n    }\n\n    componentDidUpdate() {\n    }\n\n\n    render() {\n        return (\n            <div style={{\n                border: '1px solid black',\n                backgroundColor: '#5DAB51',\n\n            }}>\n                <Container fluid>\n                    <Row>\n                        <Col>\n                            {/* Rien */}\n                        </Col>\n                        <Col>\n                            <Container fluid >\n                                <Row style={this.state.defStyle}>\n                                    {\n                                        this.state.player1.cards.map((value, key) => {\n                                            return <Carte num={value} index={key} identity='othercards' />\n                                        })}\n                                </Row>\n                                <br />\n                                <Row style={this.state.defStyle}>\n                                    {this.state.player1.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player1.pseudo}</span> : <span></span>}\n                                </Row>\n                            </Container>\n                        </Col>\n                        <Col>\n                            {/* Rien */}\n                        </Col>\n                    </Row>\n                    <br />\n                    <br />\n                    <Row>\n                        <Col>\n                            <Row style={this.state.defStyle}>\n                                {\n                                    this.state.player2.cards.map((value, key) => {\n                                        return <Carte num={value} index={key} identity='othercards' />\n                                    })}\n                            </Row>\n                            <br />\n                            <Row style={this.state.defStyle}>\n                                {this.state.player2.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player2.pseudo}</span> : <span></span>}\n                            </Row>\n\n                        </Col>\n                        <Col style={{ border: '2px solid red', borderRadius: '10px', }}>\n                            <Row style={this.state.defStyle}>\n                                {this.state.switcher === true ? <span id={String(this.state.switcher)}>Pile</span> : <span id={String(this.state.switcher)}>Pile</span>}\n                            </Row>\n                            <Row style={this.state.defStyle}>\n                                {\n                                    this.state.pile === [] ? <span>VIDE</span> : this.state.pile.map((value, key) => {\n                                        return <Carte num={value} index={key} identity='cards' />\n                                    })\n                                }\n                            </Row>\n                            <br />\n                            <Row>\n\n                            </Row>\n                        </Col>\n                        <Col>\n                            <Row style={this.state.defStyle}>\n                                {\n                                    this.state.player3.cards.map((value, key) => {\n                                        return <Carte num={value} index={key} identity='othercards' />\n                                    })}\n                            </Row>\n                            <br />\n                            <Row style={this.state.defStyle}>\n                                {this.state.player3.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player3.pseudo}</span> : <span></span>}\n                            </Row>\n                        </Col>\n                    </Row>\n                    <br />\n                    <br />\n                    <Row>\n                        <Col>\n                            {this.isThere4Players()}\n                        </Col>\n                        <Col>\n                            {this.isThereErrorMessage()}\n                        </Col>\n                        <Col>\n                            {this.isThere5Players()}\n                        </Col>\n                    </Row>\n                </Container>\n                <br />\n                <br />\n                <Container fluid>\n                    <Row>\n                        {this.state.playerToken ===1 ? <Col style={this.state.defStyle}><Button variant='secondary' block disable>pass</Button></Col> : <Col style={this.state.defStyle}><Button block >pass</Button></Col>}\n                        <Col style={this.state.defStyle}>\n                            {\n                                this.state.playerCard.map((value, index) => {\n                                    if (this.state.selectedCard.indexOf(value) !== -1) {\n                                        return <Carte num={value} index={index} identity='usercards' action={this.showCard} style={this.state.cardStyle} />;\n                                    } else {\n                                        return <Carte num={value} index={index} identity='usercards' action={this.showCard} />;\n                                    }\n                                })\n                            }\n                        </Col>\n                        {this.state.selectedCard.length > 0 ? this.state.playerToken === 1 ? <Col style={this.state.defStyle}><Button onClick={() => this.canHePlay()} block>Play selected cards</Button></Col> :<Col style={this.state.defStyle}><Button variant=\"secondary\" block disabled>Play selected cards</Button></Col> : <Col style={this.state.defStyle}><Button variant=\"secondary\" block disabled>Play selected cards</Button></Col>}\n\n                    </Row>\n                </Container>\n                <br />\n                <br />\n                <br />\n\n                <div></div>\n            </div>\n        )\n    }\n}\n\nexport default Game;\n\n\n\n\n/*{\n            ace :   '1:14:27:40' ,\n            two:    '2:15:28:41',\n            three:  '3:16:29:42',\n            four:   '4:17:30:43',\n            five:   '5:18:31:44',\n            six:    '6:19:32:45',\n            seven:  '7:20:33:46',\n            eight:  '8:21:34:47',\n            nine:   '9:22:35:48',\n            ten:    '10:23:36:49',\n            jack:   '11:24:37:50',\n            queen:  '12:25:38:51',\n            king:   '13:26:39:52',\n\n            } */\n","/home/debian/hosting/projet/client/src/components/NavigationAutres.js",[],"/home/debian/hosting/projet/client/src/components/NavigationHisto.js",[],"/home/debian/hosting/projet/client/src/components/NavigationProfil.js",[],"/home/debian/hosting/projet/client/src/components/Carte.js",[],"/home/debian/hosting/projet/client/src/pages/Home/Home.js",["88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109"],"import React from \"react\";\n//import { Component } from \"react\";\n\nimport { Link } from 'react-router-dom';\nimport { Button, Row, Col, Container, Alert } from 'react-bootstrap'\nimport Lobby from './components/Lobby'\nimport Pool from './components/Pool'\nimport Select from 'react-select'\nimport io, { Socket } from \"socket.io-client\";\n//import App from \"../../App\";\n//import Profil from \"../Profil/Profil\";\n\n\n\nconst options = [\n    { value: '4', label: '4' },\n    { value: '5', label: '5' },\n    { value: '6', label: '6' },\n]\n\nlet lobbySocket\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gameCode: '',\n            gameFromCode: '',\n            pseudo: undefined,\n            gameId: undefined,\n            maxPlayers: undefined,\n            playerToken: 0,\n            lobby: undefined,\n            joinedGame: undefined,\n            createGame: undefined,\n            pool: undefined,\n            connectionConfig: {\n                \"force new connection\": true,\n                \"reconnectionAttemps\": \"Infinity\",\n                \"timeout\":75,\n                \"transports\": [\"websocket\",\"polling\"],\n                \"path\" : '/app2socket'\n            },\n            endpoint: 'http://135.125.101.210:5003/app2socket',\n            message: { type: undefined, title: undefined, txt: undefined, variant: undefined },\n            defStyle: { display: 'flex', justifyContent: 'center', alignItems: 'center' },\n\n        }\n        this.launchGame = this.launchGame.bind(this)\n        this.handleCreate = this.handleCreate.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleLeave = this.handleLeave.bind(this)\n        lobbySocket = io.connect(this.state.endpoint, this.state.connectionConfig);\n    }\n    /**************  HOME **************/\n\n    /**********  HANDLE  **********/\n\n    //handle joining with a code\n    handleCreate(event) {\n        event.preventDefault();\n        let isIn = false;\n        if (this.state.pseudo === undefined) {\n            if (localStorage.getItem('Pseudo') === undefined) {\n                if (localStorage.getItem('guestPseudo') !== undefined) {\n                    this.setState({ pseudo: localStorage.getItem('guestPseudo') })\n                }\n                else {\n                    alert('VOUS DEVEZ VOUS ENREGISTRER EN GUEST OU AVEC VOTRE COMPTE.')\n                }\n                this.setState({ pseudo: localStorage.getItem('Pseudo') })\n                alert(\"Votre pseudo n'a pas été pris en compte, veuillez réessayer\")\n                return 0;\n            }\n        }\n        for (let item of this.state.pool) {\n            if (this.state.gameId === item.gameId) { isIn = true }\n        }\n        if (!isIn) {\n            lobbySocket.emit('createLobby', { gid: this.state.gameId, mpv: this.state.maxPlayers.value })\n        }\n        else {\n            alert(\"This name is already used\");\n        }\n    };\n    async handleOwnerJoin(gameId, pseudo) {\n        //puts himself in the lobby as owner\n\n        lobbySocket.emit('repGameCreated', { user: pseudo, gid: gameId, token: 1 })\n        this.setState({ playerToken: 1, gameId: gameId, createGame: undefined });\n        localStorage.setItem(\"gameId\", gameId);\n        localStorage.setItem(\"pseudo\", pseudo);\n    }\n\n    handleLobby() {\n        this.setState({ createGame: true })\n    }\n    handleExitCreate() {\n        this.setState({ createGame: undefined })\n    }\n    async handleSubmit(event) {\n        event.preventDefault();\n        await fetch(`http://135.125.101.210:5000/game/${this.state.gameCode}`)\n            .then(response => response.json())\n            .then(json => {\n                localStorage.setItem(\"joinedGame\", json[0].gameId);\n            })\n        this.setState({ gameFromCode: localStorage.getItem(\"joinedGame\") });\n\n        await fetch(`http://135.125.101.210:5000/lobby/${localStorage.getItem(\"joinedGame\")}`)\n            .then(response => response.json())\n            .then(json => {\n                this.setState({ lobby: json });\n\n            })\n\n\n        let index = undefined;\n        for (let item in this.state.pool) {\n            if (this.state.pool[item].gameId === localStorage.getItem(\"joinedGame\")) {\n                index = item\n            }\n        }\n\n        if (this.state.pool[index].currPlayers >= this.state.pool[index].maxPlayers) {\n            localStorage.removeItem(\"joinedGame\");\n            this.setState({ gameFromCode: undefined });\n            alert('lobby is full');\n        }\n        else {\n            await fetch('http://135.125.101.210:5000/lobbyp', {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    \"Acces-Control-Allow-Origin\": \"true\"\n                },\n                body: JSON.stringify({\n                    gameId: localStorage.getItem(\"joinedGame\"),\n                    pseudo: this.state.pseudo,\n                    token: 1,\n                })\n            })\n\n\n            await fetch('http://135.125.101.210:5000/icount', {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    \"Acces-Control-Allow-Origin\": \"true\"\n                },\n                body: JSON.stringify({\n                    gameId: localStorage.getItem(\"joinedGame\"),\n                })\n            })\n\n\n            await fetch(`http://135.125.101.210:5000/token/${localStorage.getItem(\"joinedGame\")}/${this.state.pseudo}`)\n                .then(response => response.json())\n                .then(json => {\n                    this.setState({ playerToken: json[0].token });\n                })\n\n            this.setState({ joinedGame: localStorage.getItem(\"joinedGame\") });\n\n            await fetch(`http://135.125.101.210:5000/lobby/${localStorage.getItem(\"joinedGame\")}`)\n                .then(response => response.json())\n                .then(json => {\n                    this.setState({ lobby: json });\n\n                })\n        }\n    }\n\n    //handle joining a game\n    handleJoin = async (gameId) => {\n        await fetch(`http://135.125.101.210:5000/exist/${gameId}`)\n            .then(response => response.json())\n            .then(json => {\n                if (json[0].bool === 0) {\n                    const msg = { type: 'pool', title: \"Lobby not found\", txt: \"The lobby you want to join no longer exists, if the lobby is still displ               ayed, please contact an administrator\", variant: 'danger' }\n                    this.setState({ message: msg });\n                    return 0;\n                }\n            })\n        if (this.state.pseudo === undefined) {\n            if (localStorage.getItem('Pseudo') === undefined) {\n                if (localStorage.getItem('guestPseudo') !== undefined) {\n                    this.setState({ pseudo: localStorage.getItem('guestPseudo') })\n                }\n                else {\n                    alert('VOUS DEVEZ VOUS ENREGISTRER EN GUEST OU AVEC VOTRE COMPTE.')\n                }\n                this.setState({ pseudo: localStorage.getItem('Pseudo') })\n                alert(\"Votre pseudo n'a pas été pris en compte, veuillez réessayer\")\n                return 0;\n            }\n        }\n        if (this.state.message.txt === undefined) {\n            lobbySocket.emit('playerJoin', { gid: gameId, user: this.state.pseudo, token: 0 })\n            this.setState({ gameId: gameId })\n\n\n        }\n\n    }\n\n\n\n\n\n\n    //handle leaving a lobby\n\n    handleLeave() {\n        const gameId = this.state.joinedGame;\n        if (this.state.playerToken === 0) {\n            lobbySocket.emit('playerLeaving', { gid: gameId, user: this.state.pseudo })\n            this.setState({ joinedGame: undefined, gameId: undefined });\n        }\n        else if (this.state.playerToken === 1) {\n            lobbySocket.emit('ownerLeaving', { gid: gameId })\n            this.setState({ joinedGame: undefined, playerToken: 0, gameId: undefined });\n        }\n    }\n\n\n    async handleRefresh(gameId) {\n        await fetch(`http://135.125.101.210:5000/lobby/${gameId}`)\n            .then(response => response.json())\n            .then(json => {\n                this.setState({ lobby: json });\n            })\n    }\n\n    async handleRefreshGames() {\n        await fetch('http://135.125.101.210:5000/pool')\n            .then(response => response.json())\n            .then(json => {\n                this.setState({ pool: Object.values(json) });\n            })\n    }\n\n    launchGame = () => {\n\n        const lobby = this.state.lobby\n        const gameId = this.state.gameId\n        fetch('http://135.125.101.210:5000/deck', {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                \"Acces-Control-Allow-Origin\": \"true\"\n            },\n            body: JSON.stringify({\n                gameId: gameId,\n                lobby: lobby,\n            })\n        })\n\n        const copyLobby = this.state.lobby\n        const user = this.state.pseudo\n        let index;\n        copyLobby.map((data, keys) => {\n            if (data.user === user) {\n                index = keys\n            }\n        })\n        let orderedLobby;\n        switch (index) {\n            case 0:\n                copyLobby.splice(index, 1)\n                orderedLobby = copyLobby.slice()\n                break;\n            case 1:\n                copyLobby.splice(index, 1)\n                orderedLobby = copyLobby.slice()\n                copyLobby.map((data, keys) => {\n                    if (keys === 0) {\n                        orderedLobby[copyLobby.length - 1] = data\n                    }\n                    else {\n                        orderedLobby[keys - 1] = data\n                    }\n                })\n                break;\n            case 2:\n                copyLobby.splice(index, 1)\n                orderedLobby = copyLobby.slice()\n                copyLobby.map((data, keys) => {\n                    if (keys === 0) {\n                        orderedLobby[copyLobby.length - 2] = data\n                    } else if (keys === 1) {\n                        orderedLobby[copyLobby.length - 1] = data\n                    }\n                    else {\n                        orderedLobby[keys - 1] = data\n                    }\n                })\n                break;\n            case 3:\n                copyLobby.splice(index, 1)\n                orderedLobby = copyLobby.slice()\n                copyLobby.map((data, keys) => {\n                    if (keys === 0) {\n                        orderedLobby[copyLobby.length - 3] = data\n                    } else if (keys === 1) {\n                        orderedLobby[copyLobby.length - 2] = data\n                    }\n                    else if (keys === 2) {\n                        orderedLobby[copyLobby.length - 1] = data\n                    }\n                    else {\n                        orderedLobby[keys - 1] = data\n                    }\n                })\n                break;\n            case 4:\n                copyLobby.splice(index, 1)\n                orderedLobby = copyLobby.slice()\n                copyLobby.map((data, keys) => {\n                    if (keys === 0) {\n                        orderedLobby[copyLobby.length - 4] = data\n                    } else if (keys === 1) {\n                        orderedLobby[copyLobby.length - 3] = data\n                    } else if (keys === 2) {\n                        orderedLobby[copyLobby.length - 2] = data\n                    } else if (keys === 3) {\n                        orderedLobby[copyLobby.length - 1] = data\n                    }\n                    else {\n                        orderedLobby[keys - 1] = data\n                    }\n                })\n                break;\n            case 5:\n                copyLobby.split(index, 1)\n                orderedLobby = copyLobby.slice()\n                copyLobby.map((data, keys) => {\n                    if (keys === 0) {\n                        orderedLobby[copyLobby.length - 5] = data\n                    } else if (keys === 1) {\n                        orderedLobby[copyLobby.length - 4] = data\n                    } else if (keys === 2) {\n                        orderedLobby[copyLobby.length - 3] = data\n                    } else if (keys === 3) {\n                        orderedLobby[copyLobby.length - 2] = data\n                    } else if (keys === 4) {\n                        orderedLobby[copyLobby.length - 1] = data\n                    }\n                    else {\n                        orderedLobby[keys - 1] = data\n                    }\n                })\n                break;\n            default:\n                break;\n        }\n\n\n        localStorage.setItem('user', user)\n        localStorage.setItem('gameId', gameId)\n        localStorage.setItem('turn', orderedLobby)\n        lobbySocket.emit('launchGame', gameId)\n        window.location.href = \"http://135.125.101.210/game\"\n    }\n\n\n\n\n    /******* OTHERS FUNCTIONS *********/\n\n    resetMessage = () => {\n        const error = { title: undefined, txt: undefined, variant: undefined }\n        this.setState({ message: error })\n    }\n    showMessage = () => {\n        if (this.state.message.type === 'pool') {\n            lobbySocket.emit('refreshPool',)\n        }\n        return (\n            <Row style={this.state.defStyle}>\n                <Alert variant={this.state.message.variant} onClose={() => this.resetMessage()} dismissible>\n                    <Alert.Heading>{this.state.message.title}</Alert.Heading>\n                    {this.state.message.txt}\n                </Alert>\n            </Row>\n        )\n    }\n\n\n    connexion = () => {\n        lobbySocket.on('connection', () => {\n            if (this.state.pseudo !== undefined)\n                lobbySocket.emit('repconnection', { user: this.state.pseudo })\n        })\n\n    }\n\n\n\n    componentDidMount() {\n        fetch('http://135.125.101.210:5000/pool')\n            .then(response => response.json())\n            .then(json => {\n                this.setState({ pool: Object.values(json) });\n            })\n\n        if (localStorage.getItem(\"Pseudo\") === undefined) {\n            if (localStorage.getItem(\"guestPseudo\") !== undefined) {\n                lobbySocket.on('connection', (data) => {\n                    lobbySocket.emit('repconnexion', { user: localStorage.getItem(\"guestPseudo\") })\n                    this.setState({ pseudo: localStorage.getItem(\"guestPseudo\") })\n                })\n            }\n        }\n\n        this.setState({ pseudo: localStorage.getItem(\"Pseudo\") })\n        const pseudo = this.state.pseudo\n        const gameId = this.state.gameId\n\n\n        /*lobbySocket.on('playerDisconnect', (sdata) => {\n            const userDisc = sdata.id\n            const copyLobby = this.state.lobby\n            const index = copyLobby.indexOf(userDisc);\n            copyLobby.splice(index, 1)\n            this.setState({ lobby: copyLobby })\n        })*/\n\n        lobbySocket.on('lobbyCreated', (sdata) => {\n            this.handleOwnerJoin(sdata.gid, this.state.pseudo);\n        })\n        lobbySocket.on('ownerInfoLobby', (data) => {\n            const gameId = this.state.gameId\n            this.setState({ joinedGame: gameId, lobby: data });\n        })\n        lobbySocket.on('playerJoinLobby', (data) => {\n            const gameId = this.state.gameId\n            this.setState({ lobby: data, joinedGame: gameId })\n\n\n        })\n        lobbySocket.on('repPlayerJoin', (data) => {\n            this.setState({ joinedGame: gameId, lobby: data, playerToken: 0 })\n        })\n        lobbySocket.on('chanPlayerLeaving', (data) => {\n            this.setState({ lobby: data })\n        })\n        lobbySocket.on('createLobby', (data) => {\n            this.setState({ pool: Object.values(data) })\n        })\n        lobbySocket.on('closeLobby', (sdata) => {\n            lobbySocket.emit('closedLobby', sdata)\n            this.handleRefreshGames();\n            this.setState({ pool: Object.values(sdata) })\n        })\n        lobbySocket.on('refreshedPool', (sdata) => {\n            this.setState({ pool: Object.values(sdata) })\n        })\n        lobbySocket.on('joinGame', (sdata) => {\n            const user = this.state.pseudo\n            const gameId = sdata\n            const copyLobby = this.state.lobby.slice()\n            let index;\n            copyLobby.map((data, keys) => {\n                if (data.user === user) {\n                    index = keys\n                }\n            })\n            let orderedLobby;\n            switch (index) {\n                case 0:\n                    copyLobby.splice(index, 1)\n                    orderedLobby = copyLobby.slice()\n                    copyLobby.map((data, keys)=>{\n                        orderedLobby.splice(keys,1,data.user)\n                    })\n                    break;\n                case 1:\n                    copyLobby.splice(index, 1)\n                    orderedLobby = copyLobby.slice()\n                    copyLobby.map((data, keys) => {\n                        if (keys === 0) {\n                            orderedLobby.splice(copyLobby.length - 1 ,1,data.user)\n                        }\n                        else {\n                            orderedLobby.splice(keys - 1 ,1,data.user)\n                        }\n                    })\n                    break;\n                case 2:\n                    copyLobby.splice(index, 1)\n                    orderedLobby = copyLobby.slice()\n                    copyLobby.map((data, keys) => {\n                        if (keys === 0) {\n                            orderedLobby.splice(copyLobby.length - 2 ,1,data.user)\n                        } else if (keys === 1) {\n                            orderedLobby.splice(copyLobby.length - 1 ,1,data.user)\n                        }\n                        else {\n                            orderedLobby.splice(keys - 1 ,1,data.user)\n                        }\n                    })\n                    break;\n                case 3:\n                    copyLobby.splice(index, 1)\n                    orderedLobby = copyLobby.slice()\n                    copyLobby.map((data, keys) => {\n                        if (keys === 0) {\n                            orderedLobby.splice(copyLobby.length - 3 ,1,data.user)\n                        } else if (keys === 1) {\n                            orderedLobby.splice(copyLobby.length - 2 ,1,data.user)\n                        }\n                        else if (keys === 2) {\n                            orderedLobby.splice(copyLobby.length - 1 ,1,data.user)\n                        }\n                        else {\n                            orderedLobby.splice(keys - 1 ,1,data.user)\n                        }\n                    })\n                    break;\n                case 4:\n                    copyLobby.splice(index, 1)\n                    orderedLobby = copyLobby.slice()\n                    copyLobby.map((data, keys) => {\n                        if (keys === 0) {\n                            orderedLobby.splice(copyLobby.length - 4 ,1,data.user)\n                        } else if (keys === 1) {\n                            orderedLobby.splice(copyLobby.length - 3 ,1,data.user)\n                        } else if (keys === 2) {\n                            orderedLobby.splice(copyLobby.length - 2 ,1,data.user)\n                        } else if (keys === 3) {\n                            orderedLobby.splice(copyLobby.length - 1 ,1,data.user)\n                        }\n                        else {\n                            orderedLobby.splice(keys - 1 ,1,data.user)\n                        }\n                    })\n                    break;\n                case 5:\n                    copyLobby.split(index, 1)\n                    orderedLobby = copyLobby.slice()\n                    copyLobby.map((data, keys) => {\n                        if (keys === 0) {\n                            orderedLobby.splice(copyLobby.length - 5 ,1,data.user)\n                        } else if (keys === 1) {\n                            orderedLobby.splice(copyLobby.length - 4 ,1,data.user)\n                        } else if (keys === 2) {\n                            orderedLobby.splice(copyLobby.length - 3 ,1,data.user)\n                        } else if (keys === 3) {\n                            orderedLobby.splice(copyLobby.length - 2 ,1,data.user)\n                        } else if (keys === 4) {\n                            orderedLobby.splice(copyLobby.length - 1 ,1,data.user)\n                        }\n                        else {\n                            orderedLobby.splice(keys - 1 ,1,data.user)\n                        }\n                    })\n                    break;\n                default:\n                    break;\n            }\n            localStorage.setItem('turn', orderedLobby)\n            localStorage.setItem('user', user)\n            localStorage.setItem('gameId', gameId)\n\n            window.location.href = \"http://135.125.101.210/game\"\n        })\n\n    }\n\n\n    render() {\n\n        if (this.state.joinedGame) {\n            return (\n                <Container fluid>\n                    <Col style={{\n                        border: '2px solid moccasin',\n                        borderRadius: '10px',\n                        backgroundColor: 'palegoldenrod'\n                    }}> {this.state.message.txt === undefined ? <a></a> : this.showMessage()}\n                        <Row>\n                            <h4>Lobby: {this.state.joinedGame}</h4>\n                            <br />\n                        </Row>\n                        <Row>\n\n                        </Row>\n\n                        <Row>\n                            <h5>Players:</h5>\n                        </Row>\n\n\n                        <Lobby\n                            userLobby={Object.values(this.state.lobby)}\n                            actionLaunchGame={this.launchGame}\n                        />\n                        <br />\n                        <Row>\n                            <Container fluid>\n                                <Row className=\"justify-content-md-center\">\n                                    <Col fluid>\n                                        <Button variant=\"outline-info\" onClick={this.handleLeave} block>Leave</Button>\n                                    </Col>\n                                    <Col fluid>\n                                        {this.state.playerToken === 1 ? this.state.lobby.length >= 4 ? <Button variant=\"outline-info\" onClick={() => this.launchGame()} block> Start Game </Button> : <Button variant=\"outline-secondary\" block disabled> Start Game </Button> : <p></p>}\n                                    </Col>\n                                </Row>\n                            </Container>\n                        </Row>\n                    </Col>\n                </Container>\n            )\n        }\n\n        else if (this.state.createGame) {\n            return (\n                <Container>\n                    <Col style={{\n                        border: '2px solid moccasin',\n                        borderRadius: '10px',\n                        backgroundColor: 'palegoldenrod'\n                    }}> {this.state.message.txt === undefined ? <a></a> : this.showMessage()}\n\n                        <Row>\n                            <Container>\n                                <Col>\n                                    <h2>Create a game</h2>\n                                    <br /><br />\n\n\n                                    <form onSubmit={this.handleCreate}>\n\n                                        <label>\n                                            <p>Lobby's name :</p>\n                                            <input type=\"text\" value={this.state.gameId} onChange={text => this.setState({ gameId: text.target.value })}                />\n                                        </label>\n                                        <br /><br />\n\n                                        <label>\n                                            <p>Amount of player : </p>\n                                            <Select options={options} value={this.state.maxPlayers} onChange={value => this.setState({ maxPlayers: value                })} />\n                                        </label>\n                                        <br /><br />\n                                        <input type=\"submit\" value=\"Create lobby\" />\n                                        <Button variant=\"outline-info\" size=\"lg\" onClick={() => this.handleExitCreate()}>exit</Button>\n                                    </form>\n\n\n\n                                </Col>\n                            </Container>\n                        </Row>\n                    </Col>\n                </Container>\n            );\n        }\n\n        else {\n            return (\n                <Container fluid>\n                    <Col style={{\n                        border: '2px solid moccasin',\n                        borderRadius: '10px',\n                        backgroundColor: 'palegoldenrod'\n                    }}> {this.state.message.txt === undefined ? <a></a> : this.showMessage()}\n                        <Row>\n                            <Button\n                                variant=\"outline-info\"\n                                size=\"lg\"\n                                onClick={() => this.handleLobby()}\n                            >\n                                Create Game\n                            </Button>\n\n\n                            <br />\n                        </Row>\n                        <Col>\n                            <Row>\n                                <form onSubmit={this.handleSubmit}>\n\n                                    <Row>\n                                        <h4>Join with a code</h4>\n                                        <br />\n                                    </Row>\n\n                                    <input type=\"text\" value={this.state.gameCode} onChange={text => this.setState({ gameCode: text.target.value })} />\n\n                                    <input type=\"submit\" value=\"Enter Game\" />\n                                </form>\n                            </Row>\n                        </Col>\n                        <Row>\n\n                            <Col>\n                                <Row>\n                                    <h4>Find games</h4>\n                                    <br />\n                                </Row>\n\n                                {this.state.pool === undefined ? <br /> : <Pool\n                                    pool={this.state.pool}\n                                    actionJoin={this.handleJoin}\n                                />}\n\n                            </Col>\n\n                        </Row>\n                    </Col>\n                </Container>\n            )\n        }\n\n\n    }\n}\n\nexport default Home;\n","/home/debian/hosting/projet/client/src/pages/Home/components/Lobby.js",["110","111","112","113"],"import React, { Component } from 'react';\nimport { Button, Row, Col, Container, Badge } from 'react-bootstrap'\n\nclass Lobby extends Component{\n    render(){\n        return(\n        <Container fluid>\n            {this.props.userLobby.map((data, key)=>{\n                const user =' : '+ String(data.user);\n                \n                if(data.token === 1){\n                    return <Row key={key}><span style={{display: 'flex', justifyContent: 'center', alignItems: 'center', border:'2px solid #FF3535',borderRadius: '10px',color: '#FF3535' }}>| Owner |</span ><p style={{display: 'flex', justifyContent: 'center', alignItems: 'center', verticalAlign:'center'}}>{user}</p><br/></Row>\n                } \n                if(data.token ===0){\n                    return <Row key={key}><span style={{display: 'flex', justifyContent: 'center', alignItems: 'center', border:'2px solid #4185FA',borderRadius: '10px',color: '#4185FA' }}>| User |</span ><p style={{display: 'flex', justifyContent: 'center', alignItems: 'center', verticalAlign:'center'}} >{user}</p><br/></Row>;\n                }\n            })}\n        </Container>\n    )\n    }\n}\nexport default Lobby;","/home/debian/hosting/projet/client/src/pages/Home/components/Pool.js",["114","115"],"import React, { Component } from 'react';\nimport { Button, Row, Col, Container, Badge } from 'react-bootstrap'\n\n\nclass Pool extends Component {\n    render() {\n        return(\n            <Container fluid>\n                {this.props.pool.map((data, key)=>{\n                    if (data.currPlayers >= data.maxPlayers){\n                        return <Row key={key}><Button variant=\"danger\">Full [{data.currPlayers}/{data.maxPlayers}]</Button><p>{data.gameId}</p></Row>\n                    }\n                    else {\n                        return <Row key={key}><Button variant=\"success\" onClick={() => this.props.actionJoin(data.gameId)}>Join [{data.currPlayers}/{data.maxPlayers}]</Button><p>{data.gameId}</p></Row>\n                    }\n                })}\n            </Container>\n        )\n    }\n}\nexport default Pool;\n\n\n\n",{"ruleId":"116","severity":1,"message":"117","line":8,"column":8,"nodeType":"118","messageId":"119","endLine":8,"endColumn":13},{"ruleId":"120","severity":1,"message":"121","line":45,"column":17,"nodeType":"122","messageId":"123","endLine":45,"endColumn":27},{"ruleId":"116","severity":1,"message":"124","line":371,"column":23,"nodeType":"118","messageId":"119","endLine":371,"endColumn":27},{"ruleId":"116","severity":1,"message":"125","line":494,"column":15,"nodeType":"118","messageId":"119","endLine":494,"endColumn":21},{"ruleId":"116","severity":1,"message":"126","line":544,"column":19,"nodeType":"118","messageId":"119","endLine":544,"endColumn":25},{"ruleId":"116","severity":1,"message":"127","line":559,"column":15,"nodeType":"118","messageId":"119","endLine":559,"endColumn":25},{"ruleId":"116","severity":1,"message":"128","line":565,"column":15,"nodeType":"118","messageId":"119","endLine":565,"endColumn":22},{"ruleId":"116","severity":1,"message":"129","line":566,"column":13,"nodeType":"118","messageId":"119","endLine":566,"endColumn":21},{"ruleId":"116","severity":1,"message":"130","line":4,"column":10,"nodeType":"118","messageId":"119","endLine":4,"endColumn":14},{"ruleId":"116","severity":1,"message":"131","line":9,"column":14,"nodeType":"118","messageId":"119","endLine":9,"endColumn":20},{"ruleId":"132","severity":1,"message":"133","line":265,"column":36,"nodeType":"134","messageId":"135","endLine":265,"endColumn":38},{"ruleId":"132","severity":1,"message":"133","line":279,"column":44,"nodeType":"134","messageId":"135","endLine":279,"endColumn":46},{"ruleId":"132","severity":1,"message":"133","line":291,"column":44,"nodeType":"134","messageId":"135","endLine":291,"endColumn":46},{"ruleId":"132","severity":1,"message":"133","line":305,"column":44,"nodeType":"134","messageId":"135","endLine":305,"endColumn":46},{"ruleId":"132","severity":1,"message":"133","line":322,"column":44,"nodeType":"134","messageId":"135","endLine":322,"endColumn":46},{"ruleId":"132","severity":1,"message":"133","line":340,"column":44,"nodeType":"134","messageId":"135","endLine":340,"endColumn":46},{"ruleId":"116","severity":1,"message":"136","line":420,"column":15,"nodeType":"118","messageId":"119","endLine":420,"endColumn":21},{"ruleId":"132","severity":1,"message":"133","line":467,"column":40,"nodeType":"134","messageId":"135","endLine":467,"endColumn":42},{"ruleId":"132","severity":1,"message":"133","line":477,"column":47,"nodeType":"134","messageId":"135","endLine":477,"endColumn":49},{"ruleId":"132","severity":1,"message":"133","line":484,"column":48,"nodeType":"134","messageId":"135","endLine":484,"endColumn":50},{"ruleId":"132","severity":1,"message":"133","line":496,"column":48,"nodeType":"134","messageId":"135","endLine":496,"endColumn":50},{"ruleId":"132","severity":1,"message":"133","line":510,"column":48,"nodeType":"134","messageId":"135","endLine":510,"endColumn":50},{"ruleId":"132","severity":1,"message":"133","line":527,"column":48,"nodeType":"134","messageId":"135","endLine":527,"endColumn":50},{"ruleId":"132","severity":1,"message":"133","line":545,"column":48,"nodeType":"134","messageId":"135","endLine":545,"endColumn":50},{"ruleId":"137","severity":1,"message":"138","line":584,"column":65,"nodeType":"139","endLine":584,"endColumn":68},{"ruleId":"140","severity":1,"message":"141","line":584,"column":65,"nodeType":"139","endLine":584,"endColumn":68},{"ruleId":"137","severity":1,"message":"138","line":627,"column":65,"nodeType":"139","endLine":627,"endColumn":68},{"ruleId":"140","severity":1,"message":"141","line":627,"column":65,"nodeType":"139","endLine":627,"endColumn":68},{"ruleId":"140","severity":1,"message":"141","line":670,"column":65,"nodeType":"139","endLine":670,"endColumn":68},{"ruleId":"137","severity":1,"message":"138","line":670,"column":65,"nodeType":"139","endLine":670,"endColumn":68},{"ruleId":"116","severity":1,"message":"142","line":2,"column":10,"nodeType":"118","messageId":"119","endLine":2,"endColumn":16},{"ruleId":"116","severity":1,"message":"143","line":2,"column":23,"nodeType":"118","messageId":"119","endLine":2,"endColumn":26},{"ruleId":"116","severity":1,"message":"144","line":2,"column":39,"nodeType":"118","messageId":"119","endLine":2,"endColumn":44},{"ruleId":"132","severity":1,"message":"145","line":8,"column":50,"nodeType":"134","messageId":"146","endLine":8,"endColumn":52},{"ruleId":"116","severity":1,"message":"143","line":2,"column":23,"nodeType":"118","messageId":"119","endLine":2,"endColumn":26},{"ruleId":"116","severity":1,"message":"144","line":2,"column":39,"nodeType":"118","messageId":"119","endLine":2,"endColumn":44},"no-unused-vars","'Popup' is defined but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'user' is assigned a value but never used.","'gameId' is assigned a value but never used.","'player' is assigned a value but never used.","'playerCard' is assigned a value but never used.","'selCard' is assigned a value but never used.","'userCard' is assigned a value but never used.","'Link' is defined but never used.","'Socket' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'pseudo' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","'Button' is defined but never used.","'Col' is defined but never used.","'Badge' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd"]